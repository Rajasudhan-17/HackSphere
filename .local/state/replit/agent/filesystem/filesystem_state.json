{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nHackSphere is a full-stack web application for hosting hackathons and listing events, similar to Unstop. The platform enables users to discover and participate in coding competitions while providing organizers with tools to create and manage events. Built with a modern tech stack, it features a React frontend with TypeScript, Express.js backend, and PostgreSQL database using Drizzle ORM.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client application is built with React 18 and TypeScript, using Vite as the build tool and development server. The frontend follows a component-based architecture with:\n\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **Forms**: React Hook Form with Zod validation\n\nThe application structure separates pages, components, hooks, and utilities, with TypeScript path mapping for clean imports. The design system uses a consistent color palette and spacing system defined through CSS custom properties.\n\n## Backend Architecture\nThe server is built with Express.js and TypeScript, providing a RESTful API architecture:\n\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth integration with session-based authentication\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **API Design**: RESTful endpoints with consistent error handling and logging middleware\n\nThe backend follows a layered architecture with separate concerns for routing, data access (storage layer), and authentication middleware.\n\n## Database Design\nPostgreSQL database with Drizzle ORM providing type-safe schema definitions:\n\n- **Users Table**: Stores user profiles with role-based access (admin, organizer, participant)\n- **Events Table**: Contains hackathon/event information with status tracking and categorization\n- **Event Registrations**: Junction table linking users to events with team information\n- **Leaderboard**: Stores competition results and rankings\n- **Sessions Table**: Required for Replit Auth session management\n\nThe schema uses proper foreign key relationships and includes audit fields for tracking creation and updates.\n\n## Authentication & Authorization\n- **Authentication Provider**: Replit Auth with OpenID Connect\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Role-Based Access**: Three user roles (admin, organizer, participant) with different permissions\n- **Protected Routes**: Middleware-based route protection on both frontend and backend\n\n## Development & Deployment\n- **Development**: Vite dev server with HMR for frontend, tsx for TypeScript execution\n- **Build Process**: Vite for frontend bundling, esbuild for backend compilation\n- **Environment**: Configured for Replit deployment with development/production settings\n- **Database Migrations**: Drizzle Kit for schema migrations and database management\n\n# External Dependencies\n\n## Core Frameworks\n- **React 18**: Frontend framework with TypeScript support\n- **Express.js**: Backend web framework for Node.js\n- **Vite**: Frontend build tool and development server\n\n## Database & ORM\n- **PostgreSQL**: Primary database (configured for Neon serverless)\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL adapter\n- **@neondatabase/serverless**: Serverless PostgreSQL client\n\n## Authentication\n- **Replit Auth**: OAuth authentication provider\n- **OpenID Client**: OIDC authentication flow handling\n- **Passport.js**: Authentication middleware\n- **express-session**: Session management middleware\n\n## UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Headless component primitives\n- **Shadcn/ui**: Pre-built component library\n- **Lucide React**: Icon library\n\n## State Management & Data Fetching\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management\n- **Zod**: Schema validation library\n\n## Development Tools\n- **TypeScript**: Type safety and developer experience\n- **ESBuild**: Fast JavaScript bundler for production\n- **Drizzle Kit**: Database migration and introspection tools","size_bytes":4390},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // HackSphere Custom Colors\n        \"hack-purple\": \"var(--hack-purple)\",\n        \"hack-indigo\": \"var(--hack-indigo)\",\n        \"hack-emerald\": \"var(--hack-emerald)\",\n        \"hack-amber\": \"var(--hack-amber)\",\n        \"hack-red\": \"var(--hack-red)\",\n        \"hack-blue\": \"var(--hack-blue)\",\n        \"hack-dark\": \"var(--hack-dark)\",\n        \"hack-light\": \"var(--hack-light)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3186},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertEventSchema, insertRegistrationSchema, insertLeaderboardSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      if (!req.isAuthenticated() || !req.user?.claims?.sub) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Event routes\n  app.get('/api/events', async (req, res) => {\n    try {\n      const { status, category, search, organizerId, startDate, endDate } = req.query;\n      \n      const filters: any = {};\n      if (status) filters.status = status as string;\n      if (category) filters.category = category as string;\n      if (search) filters.search = search as string;\n      if (organizerId) filters.organizerId = organizerId as string;\n      if (startDate) filters.startDate = new Date(startDate as string);\n      if (endDate) filters.endDate = new Date(endDate as string);\n\n      const events = await storage.getEvents(filters);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get('/api/events/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const event = await storage.getEventWithDetails(id);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error fetching event:\", error);\n      res.status(500).json({ message: \"Failed to fetch event\" });\n    }\n  });\n\n  app.post('/api/events', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.role !== 'admin' && user.role !== 'organizer')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const eventData = insertEventSchema.parse({\n        ...req.body,\n        organizerId: userId,\n        resources: Array.isArray(req.body.resources) \n          ? req.body.resources as { title: string; url: string; type: string }[]\n          : [],\n        tags: Array.isArray(req.body.tags) ? req.body.tags as string[] : [],\n      });\n\n      const event = await storage.createEvent(eventData);\n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  app.patch('/api/events/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      const event = await storage.getEvent(id);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (!user || (user.role !== 'admin' && event.organizerId !== userId)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const updateData = insertEventSchema.partial().parse({\n        ...req.body,\n        resources: Array.isArray(req.body.resources) \n          ? req.body.resources as { title: string; url: string; type: string }[]\n          : undefined,\n        tags: Array.isArray(req.body.tags) ? req.body.tags as string[] : undefined,\n      });\n      const updatedEvent = await storage.updateEvent(id, updateData);\n      res.json(updatedEvent);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      console.error(\"Error updating event:\", error);\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete('/api/events/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      const event = await storage.getEvent(id);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (!user || (user.role !== 'admin' && event.organizerId !== userId)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      await storage.deleteEvent(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  // Registration routes\n  app.get('/api/events/:eventId/registrations', isAuthenticated, async (req: any, res) => {\n    try {\n      const { eventId } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      const event = await storage.getEvent(eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (!user || (user.role !== 'admin' && event.organizerId !== userId)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const registrations = await storage.getEventRegistrations(eventId);\n      res.json(registrations);\n    } catch (error) {\n      console.error(\"Error fetching registrations:\", error);\n      res.status(500).json({ message: \"Failed to fetch registrations\" });\n    }\n  });\n\n  app.get('/api/users/:userId/registrations', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const currentUserId = req.user.claims.sub;\n      const user = await storage.getUser(currentUserId);\n\n      if (!user || (user.role !== 'admin' && currentUserId !== userId)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const registrations = await storage.getUserRegistrations(userId);\n      res.json(registrations);\n    } catch (error) {\n      console.error(\"Error fetching user registrations:\", error);\n      res.status(500).json({ message: \"Failed to fetch user registrations\" });\n    }\n  });\n\n  app.post('/api/events/:eventId/register', isAuthenticated, async (req: any, res) => {\n    try {\n      const { eventId } = req.params;\n      const userId = req.user.claims.sub;\n\n      const event = await storage.getEvent(eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (event.status !== 'upcoming') {\n        return res.status(400).json({ message: \"Registration is not open for this event\" });\n      }\n\n      if (new Date() > event.registrationDeadline) {\n        return res.status(400).json({ message: \"Registration deadline has passed\" });\n      }\n\n      if (event.maxParticipants && event.currentParticipants && event.currentParticipants >= event.maxParticipants) {\n        return res.status(400).json({ message: \"Event is full\" });\n      }\n\n      const existingRegistration = await storage.getRegistration(eventId, userId);\n      if (existingRegistration) {\n        return res.status(400).json({ message: \"Already registered for this event\" });\n      }\n\n      const registrationData = insertRegistrationSchema.parse({\n        eventId,\n        userId,\n        teamName: req.body.teamName || null,\n        teamMembers: Array.isArray(req.body.teamMembers) \n          ? req.body.teamMembers as { name: string; email: string; role?: string }[]\n          : [],\n      });\n\n      const registration = await storage.createRegistration(registrationData);\n      res.status(201).json(registration);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid registration data\", errors: error.errors });\n      }\n      console.error(\"Error creating registration:\", error);\n      res.status(500).json({ message: \"Failed to register for event\" });\n    }\n  });\n\n  app.delete('/api/registrations/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      // Get registration to check ownership\n      const registrations = await storage.getUserRegistrations(userId);\n      const registration = registrations.find(r => r.id === id);\n\n      if (!registration && user?.role !== 'admin') {\n        return res.status(404).json({ message: \"Registration not found\" });\n      }\n\n      await storage.deleteRegistration(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error canceling registration:\", error);\n      res.status(500).json({ message: \"Failed to cancel registration\" });\n    }\n  });\n\n  // Leaderboard routes\n  app.get('/api/events/:eventId/leaderboard', async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const leaderboard = await storage.getEventLeaderboard(eventId);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  app.post('/api/events/:eventId/leaderboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const { eventId } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      const event = await storage.getEvent(eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (!user || (user.role !== 'admin' && event.organizerId !== userId)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const entryData = insertLeaderboardSchema.parse({\n        eventId,\n        ...req.body,\n      });\n\n      const entry = await storage.createLeaderboardEntry(entryData);\n      res.status(201).json(entry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid leaderboard data\", errors: error.errors });\n      }\n      console.error(\"Error creating leaderboard entry:\", error);\n      res.status(500).json({ message: \"Failed to create leaderboard entry\" });\n    }\n  });\n\n  // Stats route\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Admin routes\n  app.patch('/api/users/:userId/role', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const { role } = req.body;\n      const currentUserId = req.user.claims.sub;\n      const currentUser = await storage.getUser(currentUserId);\n\n      if (!currentUser || currentUser.role !== 'admin') {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      if (!['admin', 'organizer', 'participant'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const updatedUser = await storage.upsertUser({ id: userId, role });\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12024},"server/storage.ts":{"content":"import {\n  users,\n  events,\n  eventRegistrations,\n  leaderboard,\n  type User,\n  type UpsertUser,\n  type Event,\n  type InsertEvent,\n  type EventRegistration,\n  type InsertEventRegistration,\n  type LeaderboardEntry,\n  type InsertLeaderboardEntry,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, or, ilike, gte, lte, count, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Event operations\n  getEvents(filters?: {\n    status?: string;\n    category?: string;\n    search?: string;\n    organizerId?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  getEventWithDetails(id: string): Promise<(Event & { organizer: User; registrations: EventRegistration[] }) | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n  \n  // Registration operations\n  getEventRegistrations(eventId: string): Promise<(EventRegistration & { user: User })[]>;\n  getUserRegistrations(userId: string): Promise<(EventRegistration & { event: Event })[]>;\n  getRegistration(eventId: string, userId: string): Promise<EventRegistration | undefined>;\n  createRegistration(registration: InsertEventRegistration): Promise<EventRegistration>;\n  updateRegistration(id: string, registration: Partial<InsertEventRegistration>): Promise<EventRegistration>;\n  deleteRegistration(id: string): Promise<void>;\n  \n  // Leaderboard operations\n  getEventLeaderboard(eventId: string): Promise<(LeaderboardEntry & { registration: EventRegistration & { user: User } })[]>;\n  createLeaderboardEntry(entry: InsertLeaderboardEntry): Promise<LeaderboardEntry>;\n  updateLeaderboardEntry(id: string, entry: Partial<InsertLeaderboardEntry>): Promise<LeaderboardEntry>;\n  \n  // Stats operations\n  getStats(): Promise<{\n    totalEvents: number;\n    totalParticipants: number;\n    activeEvents: number;\n    completedEvents: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Event operations\n  async getEvents(filters?: {\n    status?: string;\n    category?: string;\n    search?: string;\n    organizerId?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<Event[]> {\n    let query = db.select().from(events);\n    \n    const conditions = [];\n    \n    if (filters?.status) {\n      conditions.push(eq(events.status, filters.status as any));\n    }\n    \n    if (filters?.category) {\n      conditions.push(eq(events.category, filters.category));\n    }\n    \n    if (filters?.search) {\n      conditions.push(\n        or(\n          ilike(events.title, `%${filters.search}%`),\n          ilike(events.description, `%${filters.search}%`)\n        )\n      );\n    }\n    \n    if (filters?.organizerId) {\n      conditions.push(eq(events.organizerId, filters.organizerId));\n    }\n    \n    if (filters?.startDate) {\n      conditions.push(gte(events.startDate, filters.startDate));\n    }\n    \n    if (filters?.endDate) {\n      conditions.push(lte(events.endDate, filters.endDate));\n    }\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    \n    return await query.orderBy(desc(events.createdAt));\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event;\n  }\n\n  async getEventWithDetails(id: string): Promise<(Event & { organizer: User; registrations: EventRegistration[] }) | undefined> {\n    const [eventResult] = await db\n      .select()\n      .from(events)\n      .leftJoin(users, eq(events.organizerId, users.id))\n      .where(eq(events.id, id));\n\n    if (!eventResult || !eventResult.events) return undefined;\n\n    const registrations = await db\n      .select()\n      .from(eventRegistrations)\n      .where(eq(eventRegistrations.eventId, id));\n\n    return {\n      ...eventResult.events,\n      organizer: eventResult.users!,\n      registrations,\n    };\n  }\n\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [newEvent] = await db.insert(events).values(event).returning();\n    return newEvent;\n  }\n\n  async updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event> {\n    const [updatedEvent] = await db\n      .update(events)\n      .set({ ...event, updatedAt: new Date() })\n      .where(eq(events.id, id))\n      .returning();\n    return updatedEvent;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  // Registration operations\n  async getEventRegistrations(eventId: string): Promise<(EventRegistration & { user: User })[]> {\n    const registrations = await db\n      .select()\n      .from(eventRegistrations)\n      .leftJoin(users, eq(eventRegistrations.userId, users.id))\n      .where(eq(eventRegistrations.eventId, eventId));\n\n    return registrations.map(reg => ({\n      ...reg.event_registrations!,\n      user: reg.users!,\n    }));\n  }\n\n  async getUserRegistrations(userId: string): Promise<(EventRegistration & { event: Event })[]> {\n    const registrations = await db\n      .select()\n      .from(eventRegistrations)\n      .leftJoin(events, eq(eventRegistrations.eventId, events.id))\n      .where(eq(eventRegistrations.userId, userId));\n\n    return registrations.map(reg => ({\n      ...reg.event_registrations!,\n      event: reg.events!,\n    }));\n  }\n\n  async getRegistration(eventId: string, userId: string): Promise<EventRegistration | undefined> {\n    const [registration] = await db\n      .select()\n      .from(eventRegistrations)\n      .where(\n        and(\n          eq(eventRegistrations.eventId, eventId),\n          eq(eventRegistrations.userId, userId)\n        )\n      );\n    return registration;\n  }\n\n  async createRegistration(registration: InsertEventRegistration): Promise<EventRegistration> {\n    const [newRegistration] = await db\n      .insert(eventRegistrations)\n      .values(registration)\n      .returning();\n\n    // Update event participant count\n    await db\n      .update(events)\n      .set({ \n        currentParticipants: sql`${events.currentParticipants} + 1` \n      })\n      .where(eq(events.id, registration.eventId));\n\n    return newRegistration;\n  }\n\n  async updateRegistration(id: string, registration: Partial<InsertEventRegistration>): Promise<EventRegistration> {\n    const [updatedRegistration] = await db\n      .update(eventRegistrations)\n      .set(registration)\n      .where(eq(eventRegistrations.id, id))\n      .returning();\n    return updatedRegistration;\n  }\n\n  async deleteRegistration(id: string): Promise<void> {\n    const [registration] = await db\n      .select()\n      .from(eventRegistrations)\n      .where(eq(eventRegistrations.id, id));\n\n    await db.delete(eventRegistrations).where(eq(eventRegistrations.id, id));\n\n    if (registration) {\n      // Update event participant count\n      await db\n        .update(events)\n        .set({ \n          currentParticipants: sql`${events.currentParticipants} - 1` \n        })\n        .where(eq(events.id, registration.eventId));\n    }\n  }\n\n  // Leaderboard operations\n  async getEventLeaderboard(eventId: string): Promise<(LeaderboardEntry & { registration: EventRegistration & { user: User } })[]> {\n    const leaderboardEntries = await db\n      .select()\n      .from(leaderboard)\n      .leftJoin(eventRegistrations, eq(leaderboard.registrationId, eventRegistrations.id))\n      .leftJoin(users, eq(eventRegistrations.userId, users.id))\n      .where(eq(leaderboard.eventId, eventId))\n      .orderBy(asc(leaderboard.position));\n\n    return leaderboardEntries.map(entry => ({\n      ...entry.leaderboard!,\n      registration: {\n        ...entry.event_registrations!,\n        user: entry.users!,\n      },\n    }));\n  }\n\n  async createLeaderboardEntry(entry: InsertLeaderboardEntry): Promise<LeaderboardEntry> {\n    const [newEntry] = await db.insert(leaderboard).values(entry).returning();\n    return newEntry;\n  }\n\n  async updateLeaderboardEntry(id: string, entry: Partial<InsertLeaderboardEntry>): Promise<LeaderboardEntry> {\n    const [updatedEntry] = await db\n      .update(leaderboard)\n      .set(entry)\n      .where(eq(leaderboard.id, id))\n      .returning();\n    return updatedEntry;\n  }\n\n  // Stats operations\n  async getStats(): Promise<{\n    totalEvents: number;\n    totalParticipants: number;\n    activeEvents: number;\n    completedEvents: number;\n  }> {\n    const [totalEventsResult] = await db.select({ count: count() }).from(events);\n    const [totalParticipantsResult] = await db.select({ count: count() }).from(eventRegistrations);\n    const [activeEventsResult] = await db\n      .select({ count: count() })\n      .from(events)\n      .where(eq(events.status, \"live\"));\n    const [completedEventsResult] = await db\n      .select({ count: count() })\n      .from(events)\n      .where(eq(events.status, \"completed\"));\n\n    return {\n      totalEvents: totalEventsResult.count,\n      totalParticipants: totalParticipantsResult.count,\n      activeEvents: activeEventsResult.count,\n      completedEvents: completedEventsResult.count,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9904},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\", { enum: [\"admin\", \"organizer\", \"participant\"] }).default(\"participant\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Event status enum\nexport const eventStatusEnum = pgEnum(\"event_status\", [\"draft\", \"upcoming\", \"live\", \"completed\", \"cancelled\"]);\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  shortDescription: text(\"short_description\"),\n  organizerId: varchar(\"organizer_id\").notNull().references(() => users.id),\n  status: eventStatusEnum(\"status\").default(\"draft\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  registrationDeadline: timestamp(\"registration_deadline\").notNull(),\n  maxParticipants: integer(\"max_participants\"),\n  currentParticipants: integer(\"current_participants\").default(0),\n  prizePool: varchar(\"prize_pool\"),\n  category: varchar(\"category\"),\n  difficulty: varchar(\"difficulty\", { enum: [\"beginner\", \"intermediate\", \"advanced\"] }),\n  requirements: text(\"requirements\"),\n  rules: text(\"rules\"),\n  judgesCriteria: text(\"judges_criteria\"),\n  resources: jsonb(\"resources\").$type<{ title: string; url: string; type: string }[]>().default([]),\n  tags: text(\"tags\").array().default([]),\n  bannerImageUrl: varchar(\"banner_image_url\"),\n  isPublic: boolean(\"is_public\").default(true),\n  allowTeams: boolean(\"allow_teams\").default(true),\n  maxTeamSize: integer(\"max_team_size\").default(4),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Event registrations table\nexport const eventRegistrations = pgTable(\"event_registrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull().references(() => events.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  teamName: varchar(\"team_name\"),\n  teamMembers: jsonb(\"team_members\").$type<{ name: string; email: string; role?: string }[]>().default([]),\n  status: varchar(\"status\", { enum: [\"pending\", \"confirmed\", \"cancelled\"] }).default(\"confirmed\"),\n  registeredAt: timestamp(\"registered_at\").defaultNow(),\n  submissionUrl: varchar(\"submission_url\"),\n  submissionDescription: text(\"submission_description\"),\n  submittedAt: timestamp(\"submitted_at\"),\n});\n\n// Leaderboard table\nexport const leaderboard = pgTable(\"leaderboard\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull().references(() => events.id, { onDelete: \"cascade\" }),\n  registrationId: varchar(\"registration_id\").notNull().references(() => eventRegistrations.id, { onDelete: \"cascade\" }),\n  position: integer(\"position\").notNull(),\n  score: integer(\"score\").default(0),\n  prize: varchar(\"prize\"),\n  judgeFeedback: text(\"judge_feedback\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  organizedEvents: many(events),\n  registrations: many(eventRegistrations),\n}));\n\nexport const eventsRelations = relations(events, ({ one, many }) => ({\n  organizer: one(users, {\n    fields: [events.organizerId],\n    references: [users.id],\n  }),\n  registrations: many(eventRegistrations),\n  leaderboardEntries: many(leaderboard),\n}));\n\nexport const eventRegistrationsRelations = relations(eventRegistrations, ({ one }) => ({\n  event: one(events, {\n    fields: [eventRegistrations.eventId],\n    references: [events.id],\n  }),\n  user: one(users, {\n    fields: [eventRegistrations.userId],\n    references: [users.id],\n  }),\n  leaderboardEntry: one(leaderboard, {\n    fields: [eventRegistrations.id],\n    references: [leaderboard.registrationId],\n  }),\n}));\n\nexport const leaderboardRelations = relations(leaderboard, ({ one }) => ({\n  event: one(events, {\n    fields: [leaderboard.eventId],\n    references: [events.id],\n  }),\n  registration: one(eventRegistrations, {\n    fields: [leaderboard.registrationId],\n    references: [eventRegistrations.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = typeof events.$inferInsert;\n\nexport type EventRegistration = typeof eventRegistrations.$inferSelect;\nexport type InsertEventRegistration = typeof eventRegistrations.$inferInsert;\n\nexport type LeaderboardEntry = typeof leaderboard.$inferSelect;\nexport type InsertLeaderboardEntry = typeof leaderboard.$inferInsert;\n\n// Zod schemas\nexport const insertEventSchema = createInsertSchema(events, {\n  startDate: z.coerce.date(),\n  endDate: z.coerce.date(), \n  registrationDeadline: z.coerce.date(),\n}).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  currentParticipants: true,\n});\n\nexport const insertRegistrationSchema = createInsertSchema(eventRegistrations).omit({\n  id: true,\n  registeredAt: true,\n  status: true,\n});\n\nexport const insertLeaderboardSchema = createInsertSchema(leaderboard).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertEventData = z.infer<typeof insertEventSchema>;\nexport type InsertRegistrationData = z.infer<typeof insertRegistrationSchema>;\nexport type InsertLeaderboardData = z.infer<typeof insertLeaderboardSchema>;\n","size_bytes":6446},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Events from \"@/pages/events\";\nimport EventDetail from \"@/pages/event-detail\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport OrganizerDashboard from \"@/pages/organizer-dashboard\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-hack-purple\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/events\" component={Events} />\n          <Route path=\"/events/:id\" component={EventDetail} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/events\" component={Events} />\n          <Route path=\"/events/:id\" component={EventDetail} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          {user?.role === 'admin' && (\n            <Route path=\"/admin\" component={AdminDashboard} />\n          )}\n          {(user?.role === 'admin' || user?.role === 'organizer') && (\n            <Route path=\"/organizer\" component={OrganizerDashboard} />\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2021},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* HackSphere Custom Colors */\n  --hack-purple: hsl(262 83% 64%);\n  --hack-indigo: hsl(238 78% 68%);\n  --hack-emerald: hsl(158 67% 56%);\n  --hack-amber: hsl(42 92% 50%);\n  --hack-red: hsl(0 84% 60%);\n  --hack-blue: hsl(217 91% 60%);\n  --hack-dark: hsl(210 25% 18%);\n  --hack-light: hsl(210 20% 98%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n/* HackSphere Custom Styles */\n.gradient-bg {\n  background: linear-gradient(135deg, #6366F1 0%, #8B5CF6 100%);\n}\n\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.organic-border {\n  border-radius: 24px 8px 24px 8px;\n}\n\n.asymmetric-padding {\n  padding: 2rem 1.5rem 3rem 2.5rem;\n}\n\n/* Line clamp utilities */\n.line-clamp-1 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n\n.line-clamp-2 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n}\n\n.line-clamp-3 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n}\n","size_bytes":6199},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/event-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Users, Trophy, Clock, MapPin } from \"lucide-react\";\n\ninterface EventCardProps {\n  event: {\n    id: string;\n    title: string;\n    description: string;\n    shortDescription?: string;\n    status: string;\n    startDate: string;\n    endDate: string;\n    currentParticipants: number;\n    maxParticipants?: number;\n    category?: string;\n    difficulty?: string;\n    prizePool?: string;\n    bannerImageUrl?: string;\n    organizer?: {\n      firstName?: string;\n      lastName?: string;\n      email: string;\n    };\n  };\n}\n\nexport default function EventCard({ event }: EventCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live': return 'bg-hack-emerald text-white';\n      case 'upcoming': return 'bg-hack-amber text-white';\n      case 'completed': return 'bg-gray-400 text-white';\n      case 'draft': return 'bg-gray-300 text-gray-700';\n      default: return 'bg-gray-400 text-white';\n    }\n  };\n\n  const getDifficultyColor = (difficulty?: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 text-green-800';\n      case 'intermediate': return 'bg-yellow-100 text-yellow-800';\n      case 'advanced': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getDefaultImage = () => {\n    const images = [\n      \"https://images.unsplash.com/photo-1531482615713-2afd69097998?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n      \"https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n      \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n      \"https://images.unsplash.com/photo-1556761175-b413da4baf72?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n    ];\n    const index = event.id.length % images.length;\n    return images[index];\n  };\n\n  const isRegistrationOpen = () => {\n    return event.status === 'upcoming' || event.status === 'live';\n  };\n\n  const timeUntilStart = () => {\n    const now = new Date();\n    const start = new Date(event.startDate);\n    const diffTime = start.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays !== 1 ? 's' : ''} to go`;\n    } else if (event.status === 'live') {\n      return 'Live now';\n    } else {\n      return 'Event ended';\n    }\n  };\n\n  return (\n    <Card className=\"card-hover bg-white shadow-lg border border-gray-100 overflow-hidden\">\n      {/* Event Image */}\n      <div className=\"relative\">\n        <img \n          src={event.bannerImageUrl || getDefaultImage()} \n          alt={event.title} \n          className=\"w-full h-48 object-cover\"\n        />\n        <div className=\"absolute top-4 left-4 flex items-center space-x-2\">\n          <Badge className={getStatusColor(event.status)}>\n            {event.status?.toUpperCase()}\n          </Badge>\n          {event.category && (\n            <Badge variant=\"secondary\" className=\"bg-white bg-opacity-90 text-hack-dark\">\n              {event.category}\n            </Badge>\n          )}\n        </div>\n        {event.difficulty && (\n          <div className=\"absolute top-4 right-4\">\n            <Badge className={getDifficultyColor(event.difficulty)}>\n              {event.difficulty}\n            </Badge>\n          </div>\n        )}\n      </div>\n\n      <CardContent className=\"p-6\">\n        {/* Event Header */}\n        <div className=\"mb-4\">\n          <h3 className=\"text-xl font-bold text-hack-dark mb-2 line-clamp-1\" data-testid={`event-title-${event.id}`}>\n            {event.title}\n          </h3>\n          <p className=\"text-gray-600 text-sm line-clamp-2\" data-testid={`event-description-${event.id}`}>\n            {event.shortDescription || event.description}\n          </p>\n        </div>\n\n        {/* Event Metadata */}\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <Calendar className=\"w-4 h-4 text-hack-purple\" />\n            <span data-testid={`event-date-${event.id}`}>\n              {new Date(event.startDate).toLocaleDateString()} - {new Date(event.endDate).toLocaleDateString()}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <Clock className=\"w-4 h-4 text-hack-amber\" />\n            <span data-testid={`event-time-${event.id}`}>{timeUntilStart()}</span>\n          </div>\n\n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <Users className=\"w-4 h-4 text-hack-emerald\" />\n            <span data-testid={`event-participants-${event.id}`}>\n              {event.currentParticipants || 0} registered\n              {event.maxParticipants && ` / ${event.maxParticipants} max`}\n            </span>\n          </div>\n\n          {event.prizePool && (\n            <div className=\"flex items-center space-x-2 text-sm text-hack-amber font-semibold\">\n              <Trophy className=\"w-4 h-4\" />\n              <span data-testid={`event-prize-${event.id}`}>{event.prizePool}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Organizer Info */}\n        {event.organizer && (\n          <div className=\"mb-4 text-xs text-gray-500\">\n            Organized by {event.organizer.firstName || event.organizer.email}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-sm\">\n            {event.maxParticipants && event.currentParticipants >= event.maxParticipants ? (\n              <Badge variant=\"destructive\" className=\"text-xs\">Full</Badge>\n            ) : isRegistrationOpen() ? (\n              <Badge variant=\"default\" className=\"text-xs bg-hack-emerald\">Open</Badge>\n            ) : (\n              <Badge variant=\"secondary\" className=\"text-xs\">Closed</Badge>\n            )}\n          </div>\n          \n          <Link href={`/events/${event.id}`}>\n            <Button \n              size=\"sm\" \n              className=\"bg-hack-purple hover:bg-purple-600 text-white\"\n              data-testid={`button-view-event-${event.id}`}\n            >\n              {event.status === 'live' ? 'Join Now' : 'View Details'}\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6615},"client/src/components/leaderboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Trophy, Medal, Award, Crown, Star, ExternalLink, User } from \"lucide-react\";\n\ninterface LeaderboardProps {\n  eventId: string;\n}\n\nexport default function Leaderboard({ eventId }: LeaderboardProps) {\n  const { data: leaderboard, isLoading } = useQuery({\n    queryKey: [\"/api/events\", eventId, \"leaderboard\"],\n    enabled: !!eventId,\n  });\n\n  const getRankIcon = (position: number) => {\n    switch (position) {\n      case 1:\n        return <Crown className=\"w-6 h-6 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"w-6 h-6 text-gray-400\" />;\n      case 3:\n        return <Award className=\"w-6 h-6 text-amber-600\" />;\n      default:\n        return <span className=\"w-6 h-6 flex items-center justify-center text-lg font-bold text-gray-600\">#{position}</span>;\n    }\n  };\n\n  const getRankColor = (position: number) => {\n    switch (position) {\n      case 1:\n        return \"bg-gradient-to-r from-yellow-400 to-yellow-600 text-white\";\n      case 2:\n        return \"bg-gradient-to-r from-gray-300 to-gray-500 text-white\";\n      case 3:\n        return \"bg-gradient-to-r from-amber-400 to-amber-600 text-white\";\n      default:\n        return \"bg-gray-50 text-gray-700\";\n    }\n  };\n\n  const getUserInitials = (user: any) => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.email) {\n      return user.email.slice(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  const getUserName = (user: any) => {\n    if (user?.firstName) {\n      return `${user.firstName} ${user.lastName || ''}`.trim();\n    }\n    return user?.email?.split('@')[0] || 'Anonymous';\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Trophy className=\"w-5 h-5 text-hack-amber\" />\n            <span>Leaderboard</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!leaderboard || leaderboard.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Trophy className=\"w-5 h-5 text-hack-amber\" />\n            <span>Leaderboard</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Trophy className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Results Yet</h3>\n            <p className=\"text-gray-600\">\n              The leaderboard will be updated once the event is completed and results are published.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Trophy className=\"w-5 h-5 text-hack-amber\" />\n          <span>Leaderboard</span>\n          <Badge variant=\"secondary\" data-testid=\"leaderboard-count\">\n            {leaderboard.length} participants\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Top 3 Podium */}\n        {leaderboard.length >= 3 && (\n          <div className=\"mb-8 grid grid-cols-3 gap-4\">\n            {/* 2nd Place */}\n            <div className=\"flex flex-col items-center order-1\">\n              <div className=\"relative\">\n                <div className=\"w-16 h-20 bg-gradient-to-t from-gray-300 to-gray-500 rounded-t-lg flex items-end justify-center pb-2 mb-2\">\n                  <span className=\"text-white font-bold text-sm\">2nd</span>\n                </div>\n                <Avatar className=\"w-12 h-12 border-4 border-gray-400 absolute -top-6 left-1/2 transform -translate-x-1/2\">\n                  <AvatarImage src={leaderboard[1]?.registration?.user?.profileImageUrl} />\n                  <AvatarFallback className=\"bg-gray-400 text-white text-sm\">\n                    {getUserInitials(leaderboard[1]?.registration?.user)}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n              <div className=\"text-center mt-2\">\n                <div className=\"font-semibold text-sm\" data-testid=\"podium-second-name\">\n                  {getUserName(leaderboard[1]?.registration?.user)}\n                </div>\n                {leaderboard[1]?.score !== undefined && (\n                  <div className=\"text-xs text-gray-600\">{leaderboard[1].score} pts</div>\n                )}\n              </div>\n            </div>\n\n            {/* 1st Place */}\n            <div className=\"flex flex-col items-center order-2\">\n              <div className=\"relative\">\n                <div className=\"w-16 h-24 bg-gradient-to-t from-yellow-400 to-yellow-600 rounded-t-lg flex items-end justify-center pb-2 mb-2\">\n                  <span className=\"text-white font-bold\">1st</span>\n                </div>\n                <Avatar className=\"w-14 h-14 border-4 border-yellow-500 absolute -top-7 left-1/2 transform -translate-x-1/2\">\n                  <AvatarImage src={leaderboard[0]?.registration?.user?.profileImageUrl} />\n                  <AvatarFallback className=\"bg-yellow-500 text-white\">\n                    {getUserInitials(leaderboard[0]?.registration?.user)}\n                  </AvatarFallback>\n                </Avatar>\n                <Crown className=\"w-6 h-6 text-yellow-500 absolute -top-12 left-1/2 transform -translate-x-1/2\" />\n              </div>\n              <div className=\"text-center mt-2\">\n                <div className=\"font-semibold\" data-testid=\"podium-first-name\">\n                  {getUserName(leaderboard[0]?.registration?.user)}\n                </div>\n                {leaderboard[0]?.score !== undefined && (\n                  <div className=\"text-sm text-gray-600\">{leaderboard[0].score} pts</div>\n                )}\n                {leaderboard[0]?.prize && (\n                  <Badge className=\"mt-1 bg-yellow-100 text-yellow-800 text-xs\">\n                    {leaderboard[0].prize}\n                  </Badge>\n                )}\n              </div>\n            </div>\n\n            {/* 3rd Place */}\n            <div className=\"flex flex-col items-center order-3\">\n              <div className=\"relative\">\n                <div className=\"w-16 h-16 bg-gradient-to-t from-amber-400 to-amber-600 rounded-t-lg flex items-end justify-center pb-2 mb-2\">\n                  <span className=\"text-white font-bold text-sm\">3rd</span>\n                </div>\n                <Avatar className=\"w-10 h-10 border-4 border-amber-500 absolute -top-5 left-1/2 transform -translate-x-1/2\">\n                  <AvatarImage src={leaderboard[2]?.registration?.user?.profileImageUrl} />\n                  <AvatarFallback className=\"bg-amber-500 text-white text-xs\">\n                    {getUserInitials(leaderboard[2]?.registration?.user)}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n              <div className=\"text-center mt-2\">\n                <div className=\"font-semibold text-sm\" data-testid=\"podium-third-name\">\n                  {getUserName(leaderboard[2]?.registration?.user)}\n                </div>\n                {leaderboard[2]?.score !== undefined && (\n                  <div className=\"text-xs text-gray-600\">{leaderboard[2].score} pts</div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Full Leaderboard */}\n        <div className=\"space-y-2\">\n          {leaderboard.map((entry: any, index: number) => (\n            <div\n              key={entry.id}\n              className={`flex items-center justify-between p-4 rounded-lg transition-all hover:shadow-md ${getRankColor(entry.position)}`}\n              data-testid={`leaderboard-entry-${index}`}\n            >\n              <div className=\"flex items-center space-x-4\">\n                {/* Rank */}\n                <div className=\"flex items-center justify-center w-8 h-8\">\n                  {getRankIcon(entry.position)}\n                </div>\n\n                {/* User Info */}\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"w-10 h-10\">\n                    <AvatarImage src={entry.registration?.user?.profileImageUrl} />\n                    <AvatarFallback className=\"bg-hack-purple text-white\">\n                      {getUserInitials(entry.registration?.user)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <div className=\"font-semibold\">\n                      {getUserName(entry.registration?.user)}\n                    </div>\n                    {entry.registration?.teamName && (\n                      <div className=\"text-sm opacity-75\">\n                        Team: {entry.registration.teamName}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                {/* Score */}\n                {entry.score !== undefined && entry.score !== null && (\n                  <div className=\"text-center\">\n                    <div className=\"font-bold text-lg\">{entry.score}</div>\n                    <div className=\"text-xs opacity-75\">points</div>\n                  </div>\n                )}\n\n                {/* Prize */}\n                {entry.prize && (\n                  <Badge \n                    className={`${\n                      entry.position <= 3 \n                        ? \"bg-yellow-100 text-yellow-800\" \n                        : \"bg-gray-100 text-gray-800\"\n                    }`}\n                  >\n                    {entry.prize}\n                  </Badge>\n                )}\n\n                {/* Submission Link */}\n                {entry.registration?.submissionUrl && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(entry.registration.submissionUrl, '_blank')}\n                    data-testid={`submission-link-${index}`}\n                  >\n                    <ExternalLink className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Judge Feedback Section for Top Entries */}\n        {leaderboard.slice(0, 3).some((entry: any) => entry.judgeFeedback) && (\n          <div className=\"mt-8 space-y-4\">\n            <h3 className=\"text-lg font-semibold text-hack-dark flex items-center space-x-2\">\n              <Star className=\"w-5 h-5 text-hack-amber\" />\n              <span>Judge Feedback</span>\n            </h3>\n            {leaderboard.slice(0, 3).map((entry: any) => (\n              entry.judgeFeedback && (\n                <Card key={entry.id} className=\"bg-gray-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <div className=\"flex items-center justify-center w-6 h-6\">\n                        {getRankIcon(entry.position)}\n                      </div>\n                      <span className=\"font-semibold\">\n                        {getUserName(entry.registration?.user)}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-700 italic\">\"{entry.judgeFeedback}\"</p>\n                  </CardContent>\n                </Card>\n              )\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12514},"client/src/components/search-filters.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Search, Filter, X } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface SearchFiltersProps {\n  onFiltersChange: (filters: {\n    search: string;\n    status: string;\n    category: string;\n    difficulty: string;\n    startDate?: Date;\n    endDate?: Date;\n  }) => void;\n  currentFilters: {\n    search: string;\n    status: string;\n    category: string;\n    difficulty: string;\n    startDate?: Date;\n    endDate?: Date;\n  };\n}\n\nexport default function SearchFilters({ onFiltersChange, currentFilters }: SearchFiltersProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const categories = [\n    \"Web Development\",\n    \"Mobile Development\", \n    \"AI/ML\",\n    \"Blockchain\",\n    \"IoT\",\n    \"Data Science\",\n    \"Cybersecurity\",\n    \"Game Development\",\n    \"UI/UX Design\",\n    \"DevOps\"\n  ];\n\n  const difficulties = [\"beginner\", \"intermediate\", \"advanced\"];\n  const statuses = [\"upcoming\", \"live\", \"completed\"];\n\n  const updateFilter = (key: string, value: any) => {\n    onFiltersChange({\n      ...currentFilters,\n      [key]: value\n    });\n  };\n\n  const clearFilters = () => {\n    onFiltersChange({\n      search: \"\",\n      status: \"all\",\n      category: \"all\",\n      difficulty: \"all\",\n      startDate: undefined,\n      endDate: undefined,\n    });\n  };\n\n  const getActiveFilterCount = () => {\n    let count = 0;\n    if (currentFilters.search) count++;\n    if (currentFilters.status && currentFilters.status !== \"all\") count++;\n    if (currentFilters.category && currentFilters.category !== \"all\") count++;\n    if (currentFilters.difficulty && currentFilters.difficulty !== \"all\") count++;\n    if (currentFilters.startDate) count++;\n    if (currentFilters.endDate) count++;\n    return count;\n  };\n\n  const activeFilterCount = getActiveFilterCount();\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-hack-dark flex items-center space-x-2\">\n            <Filter className=\"w-5 h-5\" />\n            <span>Filters</span>\n            {activeFilterCount > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {activeFilterCount}\n              </Badge>\n            )}\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            {activeFilterCount > 0 && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={clearFilters}\n                data-testid=\"button-clear-all-filters\"\n              >\n                <X className=\"w-4 h-4 mr-1\" />\n                Clear All\n              </Button>\n            )}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n              data-testid=\"button-toggle-filters\"\n            >\n              {isExpanded ? \"Collapse\" : \"Expand\"}\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Search - Always Visible */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder=\"Search events...\"\n            value={currentFilters.search}\n            onChange={(e) => updateFilter(\"search\", e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-filters\"\n          />\n        </div>\n\n        {/* Quick Filters - Always Visible */}\n        <div className=\"flex flex-wrap gap-2\">\n          <Button\n            variant={currentFilters.status === \"live\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => updateFilter(\"status\", currentFilters.status === \"live\" ? \"all\" : \"live\"))\n            className={currentFilters.status === \"live\" ? \"bg-hack-emerald hover:bg-emerald-600\" : \"\"}\n            data-testid=\"button-quick-filter-live\"\n          >\n            🔴 Live\n          </Button>\n          <Button\n            variant={currentFilters.status === \"upcoming\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => updateFilter(\"status\", currentFilters.status === \"upcoming\" ? \"all\" : \"upcoming\"))\n            className={currentFilters.status === \"upcoming\" ? \"bg-hack-amber hover:bg-amber-600\" : \"\"}\n            data-testid=\"button-quick-filter-upcoming\"\n          >\n            ⏰ Upcoming\n          </Button>\n          <Button\n            variant={currentFilters.category === \"AI/ML\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => updateFilter(\"category\", currentFilters.category === \"AI/ML\" ? \"all\" : \"AI/ML\"))\n            className={currentFilters.category === \"AI/ML\" ? \"bg-hack-purple hover:bg-purple-600\" : \"\"}\n            data-testid=\"button-quick-filter-ai\"\n          >\n            🤖 AI/ML\n          </Button>\n          <Button\n            variant={currentFilters.category === \"Blockchain\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => updateFilter(\"category\", currentFilters.category === \"Blockchain\" ? \"all\" : \"Blockchain\"))\n            className={currentFilters.category === \"Blockchain\" ? \"bg-hack-indigo hover:bg-indigo-600\" : \"\"}\n            data-testid=\"button-quick-filter-blockchain\"\n          >\n            ⛓️ Blockchain\n          </Button>\n        </div>\n\n        {/* Expanded Filters */}\n        {isExpanded && (\n          <div className=\"space-y-4 pt-4 border-t\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {/* Status Filter */}\n              <div>\n                <Label htmlFor=\"status-filter\" className=\"text-sm font-medium text-gray-700\">Status</Label>\n                <Select value={currentFilters.status} onValueChange={(value) => updateFilter(\"status\", value)}>\n                  <SelectTrigger data-testid=\"select-status-filter-expanded\">\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    {statuses.map(status => (\n                      <SelectItem key={status} value={status}>\n                        {status.charAt(0).toUpperCase() + status.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Category Filter */}\n              <div>\n                <Label htmlFor=\"category-filter\" className=\"text-sm font-medium text-gray-700\">Category</Label>\n                <Select value={currentFilters.category} onValueChange={(value) => updateFilter(\"category\", value)}>\n                  <SelectTrigger data-testid=\"select-category-filter-expanded\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map(category => (\n                      <SelectItem key={category} value={category}>{category}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Difficulty Filter */}\n              <div>\n                <Label htmlFor=\"difficulty-filter\" className=\"text-sm font-medium text-gray-700\">Difficulty</Label>\n                <Select value={currentFilters.difficulty} onValueChange={(value) => updateFilter(\"difficulty\", value)}>\n                  <SelectTrigger data-testid=\"select-difficulty-filter\">\n                    <SelectValue placeholder=\"All Levels\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Levels</SelectItem>\n                    {difficulties.map(difficulty => (\n                      <SelectItem key={difficulty} value={difficulty}>\n                        {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Date Range - Start Date */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">Start Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start text-left font-normal\"\n                      data-testid=\"button-start-date-filter\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {currentFilters.startDate ? format(currentFilters.startDate, \"PPP\") : \"Pick a date\"}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={currentFilters.startDate}\n                      onSelect={(date) => updateFilter(\"startDate\", date)}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n\n            {/* End Date - Full Width */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">End Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start text-left font-normal\"\n                      data-testid=\"button-end-date-filter\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {currentFilters.endDate ? format(currentFilters.endDate, \"PPP\") : \"Pick a date\"}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={currentFilters.endDate}\n                      onSelect={(date) => updateFilter(\"endDate\", date)}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Active Filters Display */}\n        {activeFilterCount > 0 && (\n          <div className=\"pt-4 border-t\">\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Active Filters:</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {currentFilters.search && (\n                <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                  <span>Search: {currentFilters.search}</span>\n                  <X \n                    className=\"w-3 h-3 cursor-pointer\" \n                    onClick={() => updateFilter(\"search\", \"\")}\n                  />\n                </Badge>\n              )}\n              {currentFilters.status && (\n                <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                  <span>Status: {currentFilters.status}</span>\n                  <X \n                    className=\"w-3 h-3 cursor-pointer\" \n                    onClick={() => updateFilter(\"status\", \"\")}\n                  />\n                </Badge>\n              )}\n              {currentFilters.category && (\n                <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                  <span>Category: {currentFilters.category}</span>\n                  <X \n                    className=\"w-3 h-3 cursor-pointer\" \n                    onClick={() => updateFilter(\"category\", \"\")}\n                  />\n                </Badge>\n              )}\n              {currentFilters.difficulty && (\n                <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                  <span>Level: {currentFilters.difficulty}</span>\n                  <X \n                    className=\"w-3 h-3 cursor-pointer\" \n                    onClick={() => updateFilter(\"difficulty\", \"\")}\n                  />\n                </Badge>\n              )}\n              {currentFilters.startDate && (\n                <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                  <span>From: {format(currentFilters.startDate, \"PP\")}</span>\n                  <X \n                    className=\"w-3 h-3 cursor-pointer\" \n                    onClick={() => updateFilter(\"startDate\", undefined)}\n                  />\n                </Badge>\n              )}\n              {currentFilters.endDate && (\n                <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                  <span>To: {format(currentFilters.endDate, \"PP\")}</span>\n                  <X \n                    className=\"w-3 h-3 cursor-pointer\" \n                    onClick={() => updateFilter(\"endDate\", undefined)}\n                  />\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13848},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":355},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Calendar, \n  Trophy, \n  Settings, \n  BarChart3,\n  Shield,\n  UserCheck,\n  AlertTriangle,\n  TrendingUp,\n  Activity,\n  Eye,\n  Edit,\n  Trash2,\n  Plus\n} from \"lucide-react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n\n  // Redirect if not admin\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-hack-light\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <AlertTriangle className=\"w-16 h-16 text-hack-red mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Access Denied</h1>\n            <p className=\"text-gray-600 mb-6\">You don't have permission to access the admin dashboard.</p>\n            <Link href=\"/\">\n              <Button>Go Home</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: events } = useQuery({\n    queryKey: [\"/api/events\"],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      // This would need to be implemented in the backend\n      const response = await fetch(\"/api/admin/users\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      await apiRequest(\"PATCH\", `/api/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Role Updated\",\n        description: \"The user's role has been successfully updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setSelectedUser(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Update Role\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRoleUpdate = (userId: string, role: string) => {\n    updateUserRoleMutation.mutate({ userId, role });\n  };\n\n  const recentEvents = events?.slice(0, 5) || [];\n  const recentUsers = users?.slice(0, 5) || [];\n\n  return (\n    <div className=\"min-h-screen bg-hack-light\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-hack-dark mb-2 flex items-center space-x-3\">\n            <Shield className=\"w-8 h-8 text-hack-purple\" />\n            <span>Admin Dashboard</span>\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Manage platform users, events, and monitor system health\n          </p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-purple rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-purple\" data-testid=\"stat-total-events\">\n                    {stats?.totalEvents || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-emerald rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-emerald\" data-testid=\"stat-total-users\">\n                    {users?.length || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Registered Users</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-amber rounded-lg flex items-center justify-center\">\n                  <Activity className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-amber\" data-testid=\"stat-active-events\">\n                    {stats?.activeEvents || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Active Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-indigo rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-indigo\" data-testid=\"stat-total-participants\">\n                    {stats?.totalParticipants || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Registrations</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n            <TabsTrigger value=\"events\" data-testid=\"tab-events\">Events</TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Recent Events */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Recent Events</span>\n                    <Link href=\"/events\">\n                      <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-events\">\n                        View All\n                      </Button>\n                    </Link>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {recentEvents.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {recentEvents.map((event: any) => (\n                        <div key={event.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-hack-dark line-clamp-1\">{event.title}</h3>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <Badge className={\n                                event.status === 'live' ? 'bg-hack-emerald' :\n                                event.status === 'upcoming' ? 'bg-hack-amber' :\n                                'bg-gray-400'\n                              }>\n                                {event.status}\n                              </Badge>\n                              <span className=\"text-sm text-gray-600\">\n                                {event.currentParticipants} registered\n                              </span>\n                            </div>\n                          </div>\n                          <Link href={`/events/${event.id}`}>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-event-${event.id}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          </Link>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Calendar className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                      <p>No events created yet</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Recent Users */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Users</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {recentUsers.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {recentUsers.map((userData: any) => (\n                        <div key={userData.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-hack-purple rounded-full flex items-center justify-center\">\n                              <span className=\"text-white text-sm font-semibold\">\n                                {userData.firstName?.[0] || userData.email?.[0] || 'U'}\n                              </span>\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-hack-dark\">\n                                {userData.firstName || userData.email?.split('@')[0] || 'Anonymous'}\n                              </div>\n                              <div className=\"text-sm text-gray-600\">{userData.email}</div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant={\n                              userData.role === 'admin' ? 'destructive' :\n                              userData.role === 'organizer' ? 'default' :\n                              'secondary'\n                            }>\n                              {userData.role}\n                            </Badge>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              onClick={() => setSelectedUser(userData)}\n                              data-testid={`button-edit-user-${userData.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                      <p>No users registered yet</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>User Management</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input \n                      placeholder=\"Search users...\" \n                      className=\"w-64\"\n                      data-testid=\"input-search-users\"\n                    />\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {users && users.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {users.map((userData: any) => (\n                      <div key={userData.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-hack-purple rounded-full flex items-center justify-center\">\n                            <span className=\"text-white font-semibold\">\n                              {userData.firstName?.[0] || userData.email?.[0] || 'U'}\n                            </span>\n                          </div>\n                          <div>\n                            <div className=\"font-semibold text-hack-dark\">\n                              {userData.firstName ? `${userData.firstName} ${userData.lastName || ''}`.trim() : userData.email?.split('@')[0] || 'Anonymous'}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">{userData.email}</div>\n                            <div className=\"text-xs text-gray-500\">\n                              Joined {new Date(userData.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge variant={\n                            userData.role === 'admin' ? 'destructive' :\n                            userData.role === 'organizer' ? 'default' :\n                            'secondary'\n                          }>\n                            {userData.role}\n                          </Badge>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => setSelectedUser(userData)}\n                            data-testid={`button-manage-user-${userData.id}`}\n                          >\n                            Manage\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Users className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Users Found</h3>\n                    <p className=\"text-gray-600\">Users will appear here as they register.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"events\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Event Management</span>\n                  <Link href=\"/organizer\">\n                    <Button className=\"bg-hack-purple hover:bg-purple-600\" data-testid=\"button-create-event\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Event\n                    </Button>\n                  </Link>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {events && events.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {events.map((event: any) => (\n                      <div key={event.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-hack-dark mb-1\">{event.title}</h3>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                            <div className=\"flex items-center space-x-1\">\n                              <Calendar className=\"w-4 h-4\" />\n                              <span>{new Date(event.startDate).toLocaleDateString()}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Users className=\"w-4 h-4\" />\n                              <span>{event.currentParticipants} participants</span>\n                            </div>\n                            {event.category && (\n                              <Badge variant=\"outline\">{event.category}</Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge className={\n                            event.status === 'live' ? 'bg-hack-emerald' :\n                            event.status === 'upcoming' ? 'bg-hack-amber' :\n                            event.status === 'completed' ? 'bg-gray-400' :\n                            'bg-gray-300'\n                          }>\n                            {event.status}\n                          </Badge>\n                          <Link href={`/events/${event.id}`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-admin-event-${event.id}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Calendar className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Events Created</h3>\n                    <p className=\"text-gray-600 mb-4\">Create your first event to get started.</p>\n                    <Link href=\"/organizer\">\n                      <Button className=\"bg-hack-purple hover:bg-purple-600\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Create Event\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Settings className=\"w-5 h-5\" />\n                  <span>Platform Settings</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-hack-dark mb-4\">General Settings</h3>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"platform-name\">Platform Name</Label>\n                        <Input \n                          id=\"platform-name\" \n                          defaultValue=\"HackSphere\" \n                          className=\"mt-1\"\n                          data-testid=\"input-platform-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"max-events\">Max Events per Organizer</Label>\n                        <Input \n                          id=\"max-events\" \n                          type=\"number\" \n                          defaultValue=\"10\" \n                          className=\"mt-1\"\n                          data-testid=\"input-max-events\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-hack-dark mb-4\">User Permissions</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                        <div>\n                          <div className=\"font-semibold\">Allow Event Creation</div>\n                          <div className=\"text-sm text-gray-600\">Users can create events without approval</div>\n                        </div>\n                        <input type=\"checkbox\" defaultChecked data-testid=\"checkbox-allow-event-creation\" />\n                      </div>\n                      <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                        <div>\n                          <div className=\"font-semibold\">Require Event Approval</div>\n                          <div className=\"text-sm text-gray-600\">Events need admin approval before going live</div>\n                        </div>\n                        <input type=\"checkbox\" data-testid=\"checkbox-require-approval\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-4 border-t\">\n                    <Button className=\"bg-hack-purple hover:bg-purple-600\" data-testid=\"button-save-settings\">\n                      Save Settings\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* User Role Management Dialog */}\n        <Dialog open={!!selectedUser} onOpenChange={() => setSelectedUser(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Manage User Role</DialogTitle>\n            </DialogHeader>\n            {selectedUser && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-hack-purple rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">\n                      {selectedUser.firstName?.[0] || selectedUser.email?.[0] || 'U'}\n                    </span>\n                  </div>\n                  <div>\n                    <div className=\"font-semibold\">\n                      {selectedUser.firstName ? `${selectedUser.firstName} ${selectedUser.lastName || ''}`.trim() : selectedUser.email?.split('@')[0] || 'Anonymous'}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">{selectedUser.email}</div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"user-role\">User Role</Label>\n                  <Select \n                    defaultValue={selectedUser.role} \n                    onValueChange={(value) => handleRoleUpdate(selectedUser.id, value)}\n                  >\n                    <SelectTrigger data-testid=\"select-user-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"participant\">Participant</SelectItem>\n                      <SelectItem value=\"organizer\">Organizer</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <Button \n                    onClick={() => setSelectedUser(null)} \n                    variant=\"outline\"\n                    data-testid=\"button-cancel-role-change\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":24528},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Calendar, Trophy, Users, Clock, ExternalLink, Award, Target } from \"lucide-react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  \n  const { data: userRegistrations, isLoading } = useQuery({\n    queryKey: [\"/api/users\", user?.id, \"registrations\"],\n    enabled: !!user?.id,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live': return 'bg-hack-emerald text-white';\n      case 'upcoming': return 'bg-hack-amber text-white';\n      case 'completed': return 'bg-gray-400 text-white';\n      default: return 'bg-gray-400 text-white';\n    }\n  };\n\n  const activeEvents = userRegistrations?.filter((reg: any) => \n    reg.event.status === 'live' || reg.event.status === 'upcoming'\n  ) || [];\n\n  const completedEvents = userRegistrations?.filter((reg: any) => \n    reg.event.status === 'completed'\n  ) || [];\n\n  const pastEvents = userRegistrations?.filter((reg: any) => \n    reg.event.status === 'completed'\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-hack-light\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-hack-light\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-hack-dark mb-2\" data-testid=\"text-dashboard-title\">\n            My Dashboard\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Track your hackathon journey and achievements\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-purple rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-purple\" data-testid=\"text-total-events\">\n                    {userRegistrations?.length || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-emerald rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-emerald\" data-testid=\"text-active-events\">\n                    {activeEvents.length}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Active Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-amber rounded-lg flex items-center justify-center\">\n                  <Trophy className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-amber\" data-testid=\"text-completed-events\">\n                    {completedEvents.length}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Completed</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-indigo rounded-lg flex items-center justify-center\">\n                  <Award className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-indigo\">0</div>\n                  <div className=\"text-sm text-gray-600\">Achievements</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Events Tabs */}\n        <Tabs defaultValue=\"active\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"active\" data-testid=\"tab-active\">Active Events ({activeEvents.length})</TabsTrigger>\n            <TabsTrigger value=\"completed\" data-testid=\"tab-completed\">Completed ({completedEvents.length})</TabsTrigger>\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Events ({userRegistrations?.length || 0})</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"active\" className=\"mt-6\">\n            {activeEvents.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {activeEvents.map((registration: any) => (\n                  <Card key={registration.id} className=\"card-hover\">\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg font-bold text-hack-dark mb-2 line-clamp-1\">\n                            {registration.event.title}\n                          </CardTitle>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={getStatusColor(registration.event.status)}>\n                              {registration.event.status?.toUpperCase()}\n                            </Badge>\n                            {registration.teamName && (\n                              <Badge variant=\"outline\">\n                                Team: {registration.teamName}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                        {registration.event.shortDescription || registration.event.description}\n                      </p>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span>\n                            {new Date(registration.event.startDate).toLocaleDateString()} - {new Date(registration.event.endDate).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                          <Users className=\"w-4 h-4\" />\n                          <span>{registration.event.currentParticipants || 0} participants</span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex space-x-2\">\n                        <Link href={`/events/${registration.event.id}`} className=\"flex-1\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid={`button-view-event-${registration.event.id}`}>\n                            View Event\n                          </Button>\n                        </Link>\n                        {registration.event.status === 'live' && (\n                          <Button size=\"sm\" className=\"bg-hack-emerald hover:bg-emerald-600\" data-testid={`button-participate-${registration.event.id}`}>\n                            Participate\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Clock className=\"w-12 h-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Active Events</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  You don't have any ongoing or upcoming events. Join a hackathon to get started!\n                </p>\n                <Link href=\"/events\">\n                  <Button className=\"bg-hack-purple hover:bg-purple-600\" data-testid=\"button-explore-events\">\n                    Explore Events\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"completed\" className=\"mt-6\">\n            {completedEvents.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {completedEvents.map((registration: any) => (\n                  <Card key={registration.id} className=\"card-hover\">\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg font-bold text-hack-dark mb-2 line-clamp-1\">\n                            {registration.event.title}\n                          </CardTitle>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={getStatusColor(registration.event.status)}>\n                              COMPLETED\n                            </Badge>\n                            {registration.teamName && (\n                              <Badge variant=\"outline\">\n                                Team: {registration.teamName}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                        {registration.event.shortDescription || registration.event.description}\n                      </p>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span>\n                            Completed on {new Date(registration.event.endDate).toLocaleDateString()}\n                          </span>\n                        </div>\n                        {registration.submissionUrl && (\n                          <div className=\"flex items-center space-x-2 text-sm text-hack-emerald\">\n                            <Target className=\"w-4 h-4\" />\n                            <span>Submission made</span>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex space-x-2\">\n                        <Link href={`/events/${registration.event.id}`} className=\"flex-1\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid={`button-view-results-${registration.event.id}`}>\n                            View Results\n                          </Button>\n                        </Link>\n                        {registration.submissionUrl && (\n                          <a href={registration.submissionUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <Button size=\"sm\" variant=\"ghost\" data-testid={`button-view-submission-${registration.event.id}`}>\n                              <ExternalLink className=\"w-4 h-4\" />\n                            </Button>\n                          </a>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Trophy className=\"w-12 h-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Completed Events</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Complete your first hackathon to see your achievements here.\n                </p>\n                <Link href=\"/events\">\n                  <Button className=\"bg-hack-purple hover:bg-purple-600\" data-testid=\"button-join-hackathon\">\n                    Join a Hackathon\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"all\" className=\"mt-6\">\n            {userRegistrations && userRegistrations.length > 0 ? (\n              <div className=\"space-y-4\">\n                {userRegistrations.map((registration: any) => (\n                  <Card key={registration.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-4 mb-2\">\n                            <h3 className=\"text-lg font-semibold text-hack-dark\">{registration.event.title}</h3>\n                            <Badge className={getStatusColor(registration.event.status)}>\n                              {registration.event.status?.toUpperCase()}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                            <div className=\"flex items-center space-x-1\">\n                              <Calendar className=\"w-4 h-4\" />\n                              <span>Registered on {new Date(registration.registeredAt).toLocaleDateString()}</span>\n                            </div>\n                            {registration.teamName && (\n                              <div className=\"flex items-center space-x-1\">\n                                <Users className=\"w-4 h-4\" />\n                                <span>Team: {registration.teamName}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <Link href={`/events/${registration.event.id}`}>\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${registration.event.id}`}>\n                            View Event\n                          </Button>\n                        </Link>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Calendar className=\"w-12 h-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Events Yet</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Start your hackathon journey by joining an exciting event!\n                </p>\n                <Link href=\"/events\">\n                  <Button className=\"bg-hack-purple hover:bg-purple-600\" data-testid=\"button-get-started\">\n                    Get Started\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16847},"client/src/pages/event-detail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Calendar, \n  Users, \n  Trophy, \n  Clock, \n  MapPin, \n  Star, \n  Share2, \n  BookOpen, \n  Target,\n  Award,\n  ExternalLink,\n  FileText,\n  UserPlus\n} from \"lucide-react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport Leaderboard from \"@/components/leaderboard\";\n\nexport default function EventDetail() {\n  const { id } = useParams();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [teamName, setTeamName] = useState(\"\");\n  const [teamMembers, setTeamMembers] = useState([{ name: \"\", email: \"\" }]);\n\n  const { data: event, isLoading } = useQuery({\n    queryKey: [\"/api/events\", id],\n    enabled: !!id,\n  });\n\n  const { data: userRegistration } = useQuery({\n    queryKey: [\"/api/events\", id, \"registration\", user?.id],\n    queryFn: async () => {\n      if (!user?.id || !id) return null;\n      const registrations = await fetch(`/api/users/${user.id}/registrations`, {\n        credentials: \"include\",\n      });\n      if (!registrations.ok) return null;\n      const data = await registrations.json();\n      return data.find((reg: any) => reg.eventId === id);\n    },\n    enabled: !!user?.id && !!id,\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (registrationData: any) => {\n      await apiRequest(\"POST\", `/api/events/${id}/register`, registrationData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration Successful!\",\n        description: \"You've been registered for this hackathon.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\", id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\", id, \"registration\", user?.id] });\n      setIsRegistering(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRegister = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to register for events.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    const registrationData: any = {};\n    \n    if (event?.allowTeams && teamName) {\n      registrationData.teamName = teamName;\n      registrationData.teamMembers = teamMembers.filter(member => member.name && member.email);\n    }\n\n    registerMutation.mutate(registrationData);\n  };\n\n  const addTeamMember = () => {\n    if (teamMembers.length < (event?.maxTeamSize || 4)) {\n      setTeamMembers([...teamMembers, { name: \"\", email: \"\" }]);\n    }\n  };\n\n  const removeTeamMember = (index: number) => {\n    setTeamMembers(teamMembers.filter((_, i) => i !== index));\n  };\n\n  const updateTeamMember = (index: number, field: string, value: string) => {\n    const updated = [...teamMembers];\n    updated[index] = { ...updated[index], [field]: value };\n    setTeamMembers(updated);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live': return 'bg-hack-emerald text-white';\n      case 'upcoming': return 'bg-hack-amber text-white';\n      case 'completed': return 'bg-gray-400 text-white';\n      case 'draft': return 'bg-gray-300 text-gray-700';\n      default: return 'bg-gray-400 text-white';\n    }\n  };\n\n  const isRegistrationOpen = () => {\n    if (!event) return false;\n    const now = new Date();\n    const registrationDeadline = new Date(event.registrationDeadline);\n    return event.status === 'upcoming' && now <= registrationDeadline;\n  };\n\n  const canRegister = () => {\n    return isRegistrationOpen() && !userRegistration && \n           (!event.maxParticipants || event.currentParticipants < event.maxParticipants);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-hack-light\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-64 bg-gray-200 rounded-lg mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 space-y-6\">\n                <div className=\"h-8 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-32 bg-gray-200 rounded\"></div>\n                <div className=\"h-12 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!event) {\n    return (\n      <div className=\"min-h-screen bg-hack-light\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Event Not Found</h1>\n            <p className=\"text-gray-600 mb-6\">The event you're looking for doesn't exist or has been removed.</p>\n            <Link href=\"/events\">\n              <Button>Browse Events</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-hack-light\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Hero Section */}\n        <div className=\"relative mb-8\">\n          <div className=\"h-64 bg-gradient-to-r from-hack-purple to-hack-indigo rounded-2xl overflow-hidden\">\n            {event.bannerImageUrl ? (\n              <img \n                src={event.bannerImageUrl} \n                alt={event.title} \n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full bg-gradient-to-r from-hack-purple to-hack-indigo\" />\n            )}\n            <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-end\">\n              <div className=\"p-8 text-white\">\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <Badge className={getStatusColor(event.status)}>\n                    {event.status?.toUpperCase()}\n                  </Badge>\n                  {event.category && (\n                    <Badge variant=\"outline\" className=\"bg-white bg-opacity-20 text-white border-white\">\n                      {event.category}\n                    </Badge>\n                  )}\n                  {event.difficulty && (\n                    <Badge variant=\"outline\" className=\"bg-white bg-opacity-20 text-white border-white\">\n                      {event.difficulty}\n                    </Badge>\n                  )}\n                </div>\n                <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-event-title\">{event.title}</h1>\n                <p className=\"text-xl text-gray-200\" data-testid=\"text-event-organizer\">\n                  Organized by {event.organizer?.firstName || event.organizer?.email}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"overview\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"details\" data-testid=\"tab-details\">Details</TabsTrigger>\n                <TabsTrigger value=\"resources\" data-testid=\"tab-resources\">Resources</TabsTrigger>\n                <TabsTrigger value=\"leaderboard\" data-testid=\"tab-leaderboard\">Leaderboard</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"overview\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <BookOpen className=\"w-5 h-5 text-hack-purple\" />\n                      <span>Event Overview</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-gray-700 leading-relaxed mb-6\" data-testid=\"text-event-description\">\n                      {event.description}\n                    </p>\n                    \n                    {event.requirements && (\n                      <div className=\"mb-6\">\n                        <h3 className=\"text-lg font-semibold text-hack-dark mb-3 flex items-center\">\n                          <Target className=\"w-5 h-5 text-hack-purple mr-2\" />\n                          Requirements\n                        </h3>\n                        <p className=\"text-gray-700\" data-testid=\"text-event-requirements\">{event.requirements}</p>\n                      </div>\n                    )}\n\n                    {event.tags && event.tags.length > 0 && (\n                      <div className=\"mb-6\">\n                        <h3 className=\"text-lg font-semibold text-hack-dark mb-3\">Technologies</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {event.tags.map((tag: string, index: number) => (\n                            <Badge key={index} variant=\"secondary\" data-testid={`tag-${index}`}>\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"details\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <FileText className=\"w-5 h-5 text-hack-purple\" />\n                      <span>Event Details</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {event.rules && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-hack-dark mb-3\">Rules & Guidelines</h3>\n                        <div className=\"prose max-w-none text-gray-700\" data-testid=\"text-event-rules\">\n                          {event.rules.split('\\n').map((line: string, index: number) => (\n                            <p key={index}>{line}</p>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {event.judgesCriteria && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-hack-dark mb-3\">Judging Criteria</h3>\n                        <div className=\"prose max-w-none text-gray-700\" data-testid=\"text-event-criteria\">\n                          {event.judgesCriteria.split('\\n').map((line: string, index: number) => (\n                            <p key={index}>{line}</p>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {event.prizePool && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-hack-dark mb-3 flex items-center\">\n                          <Trophy className=\"w-5 h-5 text-hack-amber mr-2\" />\n                          Prize Pool\n                        </h3>\n                        <p className=\"text-2xl font-bold text-hack-amber\" data-testid=\"text-event-prize\">\n                          {event.prizePool}\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"resources\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <ExternalLink className=\"w-5 h-5 text-hack-purple\" />\n                      <span>Resources & Links</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {event.resources && event.resources.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {event.resources.map((resource: any, index: number) => (\n                          <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                            <div>\n                              <h4 className=\"font-semibold text-hack-dark\">{resource.title}</h4>\n                              <p className=\"text-sm text-gray-600\">{resource.type}</p>\n                            </div>\n                            <a \n                              href={resource.url} \n                              target=\"_blank\" \n                              rel=\"noopener noreferrer\"\n                              className=\"text-hack-purple hover:text-purple-600\"\n                              data-testid={`link-resource-${index}`}\n                            >\n                              <ExternalLink className=\"w-5 h-5\" />\n                            </a>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <ExternalLink className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                        <p>No resources available yet</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"leaderboard\" className=\"mt-6\">\n                <Leaderboard eventId={id!} />\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Registration Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-hack-dark\">\n                  {userRegistration ? \"You're Registered!\" : \"Join This Hackathon\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Event Stats */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-hack-purple\" data-testid=\"text-participant-count\">\n                        {event.currentParticipants || 0}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Participants</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-hack-emerald\">\n                        {event.maxParticipants ? event.maxParticipants - (event.currentParticipants || 0) : '∞'}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Spots Left</div>\n                    </div>\n                  </div>\n\n                  {/* Registration Button */}\n                  {userRegistration ? (\n                    <div className=\"space-y-3\">\n                      <div className=\"p-4 bg-hack-emerald bg-opacity-10 border border-hack-emerald rounded-lg\">\n                        <div className=\"flex items-center space-x-2 text-hack-emerald\">\n                          <UserPlus className=\"w-5 h-5\" />\n                          <span className=\"font-semibold\">Successfully Registered</span>\n                        </div>\n                        {userRegistration.teamName && (\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            Team: {userRegistration.teamName}\n                          </p>\n                        )}\n                      </div>\n                      <Button variant=\"outline\" className=\"w-full\" asChild>\n                        <Link href=\"/dashboard\">View My Events</Link>\n                      </Button>\n                    </div>\n                  ) : canRegister() ? (\n                    <Dialog open={isRegistering} onOpenChange={setIsRegistering}>\n                      <DialogTrigger asChild>\n                        <Button className=\"w-full bg-hack-purple hover:bg-purple-600\" data-testid=\"button-register\">\n                          Register Now\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle>Register for {event.title}</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          {event.allowTeams && (\n                            <>\n                              <div>\n                                <Label htmlFor=\"teamName\">Team Name (Optional)</Label>\n                                <Input\n                                  id=\"teamName\"\n                                  value={teamName}\n                                  onChange={(e) => setTeamName(e.target.value)}\n                                  placeholder=\"Enter team name\"\n                                  data-testid=\"input-team-name\"\n                                />\n                              </div>\n\n                              <div>\n                                <Label>Team Members (Optional)</Label>\n                                {teamMembers.map((member, index) => (\n                                  <div key={index} className=\"flex space-x-2 mt-2\">\n                                    <Input\n                                      placeholder=\"Name\"\n                                      value={member.name}\n                                      onChange={(e) => updateTeamMember(index, 'name', e.target.value)}\n                                      data-testid={`input-member-name-${index}`}\n                                    />\n                                    <Input\n                                      placeholder=\"Email\"\n                                      type=\"email\"\n                                      value={member.email}\n                                      onChange={(e) => updateTeamMember(index, 'email', e.target.value)}\n                                      data-testid={`input-member-email-${index}`}\n                                    />\n                                    {index > 0 && (\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => removeTeamMember(index)}\n                                        data-testid={`button-remove-member-${index}`}\n                                      >\n                                        Remove\n                                      </Button>\n                                    )}\n                                  </div>\n                                ))}\n                                {teamMembers.length < (event.maxTeamSize || 4) && (\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={addTeamMember}\n                                    className=\"mt-2\"\n                                    data-testid=\"button-add-member\"\n                                  >\n                                    Add Team Member\n                                  </Button>\n                                )}\n                              </div>\n                            </>\n                          )}\n\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={handleRegister}\n                              disabled={registerMutation.isPending}\n                              className=\"flex-1 bg-hack-purple hover:bg-purple-600\"\n                              data-testid=\"button-confirm-register\"\n                            >\n                              {registerMutation.isPending ? \"Registering...\" : \"Confirm Registration\"}\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => setIsRegistering(false)}\n                              data-testid=\"button-cancel-register\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <Button disabled className=\"w-full\" data-testid=\"button-registration-closed\">\n                        {!isRegistrationOpen() ? \"Registration Closed\" : \"Event Full\"}\n                      </Button>\n                      {!isAuthenticated && (\n                        <p className=\"text-sm text-center text-gray-600\">\n                          <Button \n                            variant=\"link\" \n                            className=\"p-0 h-auto font-normal text-hack-purple\"\n                            onClick={() => window.location.href = \"/api/login\"}\n                            data-testid=\"button-login-to-register\"\n                          >\n                            Sign in\n                          </Button>\n                          {\" \"}to register for events\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Event Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-hack-dark\">Event Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"w-5 h-5 text-hack-purple\" />\n                  <div>\n                    <div className=\"font-semibold text-hack-dark\">Start Date</div>\n                    <div className=\"text-sm text-gray-600\" data-testid=\"text-start-date\">\n                      {new Date(event.startDate).toLocaleDateString('en-US', {\n                        weekday: 'long',\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"w-5 h-5 text-hack-amber\" />\n                  <div>\n                    <div className=\"font-semibold text-hack-dark\">End Date</div>\n                    <div className=\"text-sm text-gray-600\" data-testid=\"text-end-date\">\n                      {new Date(event.endDate).toLocaleDateString('en-US', {\n                        weekday: 'long',\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <Trophy className=\"w-5 h-5 text-hack-red\" />\n                  <div>\n                    <div className=\"font-semibold text-hack-dark\">Registration Deadline</div>\n                    <div className=\"text-sm text-gray-600\" data-testid=\"text-registration-deadline\">\n                      {new Date(event.registrationDeadline).toLocaleDateString('en-US', {\n                        weekday: 'long',\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric'\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                {event.allowTeams && (\n                  <div className=\"flex items-center space-x-3\">\n                    <Users className=\"w-5 h-5 text-hack-emerald\" />\n                    <div>\n                      <div className=\"font-semibold text-hack-dark\">Team Size</div>\n                      <div className=\"text-sm text-gray-600\" data-testid=\"text-team-size\">\n                        Up to {event.maxTeamSize || 4} members\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Share */}\n            <Card>\n              <CardContent className=\"pt-6\">\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-share\">\n                  <Share2 className=\"w-4 h-4 mr-2\" />\n                  Share Event\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":26832},"client/src/pages/events.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Filter, Calendar, Users, Trophy, Clock, MapPin } from \"lucide-react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport EventCard from \"@/components/event-card\";\nimport SearchFilters from \"@/components/search-filters\";\n\nexport default function Events() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"createdAt\");\n\n  const { data: events, isLoading } = useQuery({\n    queryKey: [\"/api/events\", searchTerm, statusFilter, categoryFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchTerm) params.append(\"search\", searchTerm);\n      if (statusFilter && statusFilter !== \"all\") params.append(\"status\", statusFilter);\n      if (categoryFilter && categoryFilter !== \"all\") params.append(\"category\", categoryFilter);\n      \n      const response = await fetch(`/api/events?${params.toString()}`);\n      if (!response.ok) throw new Error(\"Failed to fetch events\");\n      return response.json();\n    },\n  });\n\n  const categories = [\n    \"Web Development\",\n    \"Mobile Development\", \n    \"AI/ML\",\n    \"Blockchain\",\n    \"IoT\",\n    \"Data Science\",\n    \"Cybersecurity\",\n    \"Game Development\",\n    \"UI/UX Design\",\n    \"DevOps\"\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live': return 'bg-hack-emerald text-white';\n      case 'upcoming': return 'bg-hack-amber text-white';\n      case 'completed': return 'bg-gray-400 text-white';\n      case 'draft': return 'bg-gray-300 text-gray-700';\n      default: return 'bg-gray-400 text-white';\n    }\n  };\n\n  const sortEvents = (events: any[]) => {\n    if (!events) return [];\n    \n    return [...events].sort((a, b) => {\n      switch (sortBy) {\n        case 'startDate':\n          return new Date(a.startDate).getTime() - new Date(b.startDate).getTime();\n        case 'participants':\n          return (b.currentParticipants || 0) - (a.currentParticipants || 0);\n        case 'title':\n          return a.title.localeCompare(b.title);\n        default:\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      }\n    });\n  };\n\n  const sortedEvents = sortEvents(events);\n\n  return (\n    <div className=\"min-h-screen bg-hack-light\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-hack-dark mb-4\">Discover Hackathons</h1>\n          <p className=\"text-xl text-gray-600\">\n            Find the perfect competition to showcase your skills and win amazing prizes\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            {/* Search */}\n            <div className=\"lg:col-span-2 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search events...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-events\"\n              />\n            </div>\n\n            {/* Status Filter */}\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"upcoming\">Upcoming</SelectItem>\n                <SelectItem value=\"live\">Live</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Category Filter */}\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger data-testid=\"select-category-filter\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {categories.map(category => (\n                  <SelectItem key={category} value={category}>{category}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            {/* Sort */}\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger data-testid=\"select-sort-by\">\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"createdAt\">Latest</SelectItem>\n                <SelectItem value=\"startDate\">Start Date</SelectItem>\n                <SelectItem value=\"participants\">Most Popular</SelectItem>\n                <SelectItem value=\"title\">Name A-Z</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Results */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-gray-200 h-48 rounded-t-lg\"></div>\n                <div className=\"bg-white p-6 rounded-b-lg\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded mb-1\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : sortedEvents && sortedEvents.length > 0 ? (\n          <>\n            <div className=\"mb-6\">\n              <p className=\"text-gray-600\">\n                Showing {sortedEvents.length} event{sortedEvents.length !== 1 ? 's' : ''}\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sortedEvents.map((event: any) => (\n                <EventCard key={event.id} event={event} />\n              ))}\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Search className=\"w-12 h-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Events Found</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Try adjusting your search criteria or check back later for new events.\n            </p>\n            <Button\n              onClick={() => {\n                setSearchTerm(\"\");\n                setStatusFilter(\"\");\n                setCategoryFilter(\"\");\n              }}\n              variant=\"outline\"\n              data-testid=\"button-clear-filters\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n\n        {/* Quick Filters */}\n        <div className=\"mt-12 p-6 bg-white rounded-2xl shadow-sm\">\n          <h3 className=\"text-lg font-semibold text-hack-dark mb-4\">Quick Filters</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"live\")}\n              className={statusFilter === \"live\" ? \"bg-hack-emerald text-white\" : \"\"}\n              data-testid=\"button-filter-live\"\n            >\n              🔴 Live Now\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"upcoming\")}\n              className={statusFilter === \"upcoming\" ? \"bg-hack-amber text-white\" : \"\"}\n              data-testid=\"button-filter-upcoming\"\n            >\n              ⏰ Starting Soon\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCategoryFilter(\"AI/ML\")}\n              className={categoryFilter === \"AI/ML\" ? \"bg-hack-purple text-white\" : \"\"}\n              data-testid=\"button-filter-ai\"\n            >\n              🤖 AI/ML\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCategoryFilter(\"Blockchain\")}\n              className={categoryFilter === \"Blockchain\" ? \"bg-hack-indigo text-white\" : \"\"}\n              data-testid=\"button-filter-blockchain\"\n            >\n              ⛓️ Blockchain\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCategoryFilter(\"Web Development\")}\n              className={categoryFilter === \"Web Development\" ? \"bg-hack-blue text-white\" : \"\"}\n              data-testid=\"button-filter-web\"\n            >\n              🌐 Web Dev\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9782},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User, Event, EventRegistration } from \"@shared/schema\";\nimport { Calendar, Users, Trophy, Plus, ArrowRight } from \"lucide-react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function Home() {\n  const { user } = useAuth() as { user: User | null };\n  \n  const { data: userRegistrations } = useQuery<(EventRegistration & { event: Event })[]>({\n    queryKey: [\"/api/users\", user?.id, \"registrations\"],\n    enabled: !!user?.id,\n  });\n\n  const { data: upcomingEvents } = useQuery<Event[]>({\n    queryKey: [\"/api/events?status=upcoming\"],\n  });\n\n  const { data: stats } = useQuery<{ totalEvents: number; totalParticipants: number; activeEvents: number; completedEvents: number }>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-hack-light\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-hack-dark mb-2\">\n            Welcome back, {user?.firstName || user?.email?.split('@')[0] || 'Hacker'}! 👋\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Ready to innovate? Here's what's happening in your world.\n          </p>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-purple rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-purple\">\n                    {userRegistrations?.length || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">My Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-emerald rounded-lg flex items-center justify-center\">\n                  <Trophy className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-emerald\">\n                    {stats?.activeEvents || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Live Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-amber rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-amber\">\n                    {stats?.totalParticipants || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Hackers</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-indigo rounded-lg flex items-center justify-center\">\n                  <Plus className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-indigo\">\n                    {stats?.totalEvents || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* My Registrations */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"text-xl font-bold text-hack-dark\">My Registered Events</CardTitle>\n                <Link href=\"/dashboard\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    View All <ArrowRight className=\"w-4 h-4 ml-1\" />\n                  </Button>\n                </Link>\n              </CardHeader>\n              <CardContent>\n                {userRegistrations && userRegistrations.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {userRegistrations.slice(0, 3).map((registration: any) => (\n                      <div key={registration.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-hack-dark\">{registration.event.title}</h3>\n                          <p className=\"text-sm text-gray-600\">\n                            {new Date(registration.event.startDate).toLocaleDateString()} - {new Date(registration.event.endDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={registration.event.status === 'live' ? 'default' : 'secondary'}>\n                            {registration.event.status}\n                          </Badge>\n                          <Link href={`/events/${registration.event.id}`}>\n                            <Button size=\"sm\" variant=\"outline\">View</Button>\n                          </Link>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Calendar className=\"w-8 h-8 text-gray-400\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Events Yet</h3>\n                    <p className=\"text-gray-600 mb-4\">Start your journey by joining an exciting hackathon!</p>\n                    <Link href=\"/events\">\n                      <Button className=\"bg-hack-purple hover:bg-purple-600\">\n                        Explore Events\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Upcoming Events */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-xl font-bold text-hack-dark\">Trending Events</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {upcomingEvents && upcomingEvents.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {upcomingEvents.slice(0, 3).map((event: any) => (\n                      <div key={event.id} className=\"p-4 bg-gray-50 rounded-lg\">\n                        <h3 className=\"font-semibold text-hack-dark mb-1 line-clamp-1\">{event.title}</h3>\n                        <p className=\"text-sm text-gray-600 mb-2 line-clamp-2\">\n                          {event.shortDescription || event.description}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-1 text-xs text-gray-500\">\n                            <Users className=\"w-3 h-3\" />\n                            <span>{event.currentParticipants || 0}</span>\n                          </div>\n                          <Link href={`/events/${event.id}`}>\n                            <Button size=\"sm\" variant=\"ghost\" className=\"text-hack-purple hover:text-purple-600\">\n                              Join\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Trophy className=\"w-6 h-6 text-gray-400\" />\n                    </div>\n                    <p className=\"text-gray-600 text-sm\">No upcoming events available</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-8 p-6 bg-gradient-to-r from-hack-purple to-hack-indigo rounded-2xl text-white\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold mb-2\">Ready for Your Next Challenge?</h2>\n              <p className=\"text-purple-100\">\n                Discover new hackathons and push your limits with innovative projects.\n              </p>\n            </div>\n            <div className=\"mt-4 md:mt-0 flex space-x-4\">\n              <Link href=\"/events\">\n                <Button className=\"bg-white text-hack-purple hover:bg-gray-50\">\n                  Browse Events\n                </Button>\n              </Link>\n              {(user?.role === 'admin' || user?.role === 'organizer') && (\n                <Link href=\"/organizer\">\n                  <Button variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-hack-purple\">\n                    Host Event\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10273},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Code, Users, Trophy, Search, Calendar, ArrowRight, Star, Award, Target } from \"lucide-react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Event } from \"@shared/schema\";\n\nexport default function Landing() {\n  const { data: stats } = useQuery<{ totalEvents: number; totalParticipants: number; activeEvents: number; completedEvents: number }>({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  const { data: featuredEvents } = useQuery<Event[]>({\n    queryKey: [\"/api/events?status=live\"],\n    retry: false,\n  });\n\n  return (\n    <div className=\"min-h-screen bg-hack-light\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"gradient-bg text-white overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"asymmetric-padding\">\n              <h1 className=\"text-5xl lg:text-6xl font-bold leading-tight mb-6\">\n                Where Innovation\n                <span className=\"block text-hack-amber\">Meets Competition</span>\n              </h1>\n              <p className=\"text-xl text-purple-100 mb-8 max-w-lg\">\n                Join the premier platform for hackathons, coding competitions, and tech innovation events. \n                Connect with brilliant minds and build the future.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/events\">\n                  <Button size=\"lg\" className=\"bg-white text-hack-purple hover:bg-gray-50 font-semibold\">\n                    Explore Events\n                  </Button>\n                </Link>\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\" \n                  className=\"border-2 border-white text-white hover:bg-white hover:text-hack-purple font-semibold\"\n                  onClick={() => window.location.href = \"/api/login\"}\n                >\n                  Host an Event\n                </Button>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Team collaboration during hackathon\" \n                className=\"organic-border w-full h-96 object-cover shadow-2xl\"\n              />\n              <div className=\"absolute -bottom-6 -left-6 bg-hack-emerald text-white p-6 rounded-2xl shadow-xl\">\n                <div className=\"text-3xl font-bold\">{stats?.activeEvents || 150}+</div>\n                <div className=\"text-emerald-100\">Active Events</div>\n              </div>\n              <div className=\"absolute -top-6 -right-6 bg-hack-amber text-white p-6 rounded-2xl shadow-xl\">\n                <div className=\"text-3xl font-bold\">{stats?.totalParticipants ? `${Math.floor(stats.totalParticipants / 1000)}K` : '25K'}+</div>\n                <div className=\"text-yellow-100\">Participants</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Events */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-hack-dark mb-4\">Featured Hackathons</h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Join these trending competitions and showcase your skills to the world\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n            {featuredEvents?.slice(0, 3).map((event: any) => (\n              <Card key={event.id} className=\"card-hover bg-white shadow-lg border border-gray-100\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1531482615713-2afd69097998?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\" \n                  alt=\"Hackathon coding event\" \n                  className=\"w-full h-48 object-cover rounded-t-lg\"\n                />\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <Badge className=\"bg-hack-emerald text-white\">\n                      {event.status?.toUpperCase() || 'LIVE'}\n                    </Badge>\n                    <span className=\"text-sm text-gray-500\">\n                      {new Date(event.endDate).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-hack-dark mb-2 line-clamp-1\">\n                    {event.title}\n                  </h3>\n                  <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                    {event.shortDescription || event.description}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"w-4 h-4 text-hack-purple\" />\n                      <span className=\"text-sm text-gray-600\">\n                        {event.currentParticipants || 0} registered\n                      </span>\n                    </div>\n                    <Link href={`/events/${event.id}`}>\n                      <Button size=\"sm\" className=\"bg-hack-purple hover:bg-purple-600\">\n                        View Details\n                      </Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            )) || (\n              // Show placeholder cards if no events\n              Array.from({ length: 3 }).map((_, i) => (\n                <Card key={i} className=\"card-hover bg-white shadow-lg border border-gray-100\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1531482615713-2afd69097998?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\" \n                    alt=\"Hackathon placeholder\" \n                    className=\"w-full h-48 object-cover rounded-t-lg\"\n                  />\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-gray-400 text-white\">UPCOMING</Badge>\n                      <span className=\"text-sm text-gray-500\">Coming Soon</span>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-hack-dark mb-2\">\n                      Exciting Hackathons Coming Soon\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Stay tuned for amazing competitions and challenges.\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"w-4 h-4 text-hack-purple\" />\n                        <span className=\"text-sm text-gray-600\">Registration opens soon</span>\n                      </div>\n                      <Button size=\"sm\" className=\"bg-hack-purple hover:bg-purple-600\">\n                        Coming Soon\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n\n          <div className=\"text-center\">\n            <Link href=\"/events\">\n              <Button size=\"lg\" className=\"bg-hack-indigo hover:bg-indigo-600\">\n                View All Events\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Platform Stats */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold text-hack-dark mb-6\">\n                Empowering Innovation\n                <span className=\"block text-hack-purple\">Across the Globe</span>\n              </h2>\n              <p className=\"text-xl text-gray-600 mb-8\">\n                HackSphere has become the trusted platform for organizers and participants worldwide, \n                fostering creativity and breakthrough innovations.\n              </p>\n              <div className=\"grid grid-cols-2 gap-6\">\n                <Card className=\"p-6\">\n                  <div className=\"text-3xl font-bold text-hack-purple mb-2\">\n                    {stats?.totalEvents || 500}+\n                  </div>\n                  <div className=\"text-gray-600\">Events Hosted</div>\n                </Card>\n                <Card className=\"p-6\">\n                  <div className=\"text-3xl font-bold text-hack-emerald mb-2\">\n                    {stats?.totalParticipants ? `${Math.floor(stats.totalParticipants / 1000)}K` : '50K'}+\n                  </div>\n                  <div className=\"text-gray-600\">Participants</div>\n                </Card>\n                <Card className=\"p-6\">\n                  <div className=\"text-3xl font-bold text-hack-amber mb-2\">$2M+</div>\n                  <div className=\"text-gray-600\">Prizes Awarded</div>\n                </Card>\n                <Card className=\"p-6\">\n                  <div className=\"text-3xl font-bold text-hack-red mb-2\">45+</div>\n                  <div className=\"text-gray-600\">Countries</div>\n                </Card>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1553028826-f4804a6dba3b?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=500\" \n                alt=\"Modern innovation workspace\" \n                className=\"w-full h-96 object-cover rounded-3xl shadow-2xl\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent rounded-3xl\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-hack-dark mb-4\">How HackSphere Works</h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Getting started is simple. Follow these steps to join or host your next hackathon.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-hack-purple rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                <Users className=\"text-white w-8 h-8\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-hack-dark mb-4\">1. Create Account</h3>\n              <p className=\"text-gray-600\">\n                Sign up with your email or social accounts. Choose your role as participant or organizer.\n              </p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-hack-emerald rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                <Search className=\"text-white w-8 h-8\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-hack-dark mb-4\">2. Discover Events</h3>\n              <p className=\"text-gray-600\">\n                Browse through hundreds of hackathons, filter by technology, difficulty, and prizes.\n              </p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-hack-amber rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                <Trophy className=\"text-white w-8 h-8\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-hack-dark mb-4\">3. Compete & Win</h3>\n              <p className=\"text-gray-600\">\n                Join teams, build amazing projects, and compete for prizes and recognition.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-20 gradient-bg text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n            Ready to Build the Future?\n          </h2>\n          <p className=\"text-xl text-purple-100 mb-8 max-w-2xl mx-auto\">\n            Join thousands of innovators on HackSphere. Whether you're here to compete or organize, \n            your next breakthrough is just one event away.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              className=\"bg-white text-hack-purple hover:bg-gray-50 font-semibold text-lg\"\n              onClick={() => window.location.href = \"/api/login\"}\n            >\n              Join as Participant\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"border-2 border-white text-white hover:bg-white hover:text-hack-purple font-semibold text-lg\"\n              onClick={() => window.location.href = \"/api/login\"}\n            >\n              Become an Organizer\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13919},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/organizer-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertEventSchema, type InsertEventData, type User } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { \n  Calendar as CalendarIcon, \n  Users, \n  Trophy, \n  Plus, \n  BarChart3,\n  Settings,\n  AlertTriangle,\n  TrendingUp,\n  Activity,\n  Eye,\n  Edit,\n  Trash2,\n  UserPlus,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Award,\n  Target,\n  ExternalLink\n} from \"lucide-react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function OrganizerDashboard() {\n  const { user } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean; };\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreateEventOpen, setIsCreateEventOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<any>(null);\n\n  // Redirect if not organizer or admin\n  if (user?.role !== 'organizer' && user?.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-hack-light\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <AlertTriangle className=\"w-16 h-16 text-hack-red mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Access Denied</h1>\n            <p className=\"text-gray-600 mb-6\">You don't have permission to access the organizer dashboard.</p>\n            <Link href=\"/\">\n              <Button>Go Home</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const { data: myEvents, isLoading: eventsLoading } = useQuery({\n    queryKey: [\"/api/events\", `organizerId=${user?.id}`],\n    queryFn: async () => {\n      const response = await fetch(`/api/events?organizerId=${user?.id}`, { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch events\");\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  // Event creation form\n  const eventForm = useForm<InsertEventData>({\n    resolver: zodResolver(insertEventSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      shortDescription: \"\",\n      status: \"draft\" as const,\n      startDate: new Date(),\n      endDate: new Date(),\n      registrationDeadline: new Date(),\n      maxParticipants: undefined,\n      prizePool: \"\",\n      category: \"\",\n      difficulty: \"intermediate\" as const,\n      requirements: \"\",\n      rules: \"\",\n      judgesCriteria: \"\",\n      isPublic: true,\n      allowTeams: true,\n      maxTeamSize: 4,\n      organizerId: user?.id || \"\",\n    },\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: InsertEventData) => {\n      await apiRequest(\"POST\", \"/api/events\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Created\",\n        description: \"Your event has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setIsCreateEventOpen(false);\n      eventForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Create Event\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEventMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      await apiRequest(\"DELETE\", `/api/events/${eventId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Deleted\",\n        description: \"The event has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Delete Event\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitEvent = (data: InsertEventData) => {\n    // Clean up data and handle null values, ensure dates are Date objects\n    const cleanData = {\n      ...data,\n      organizerId: user?.id || \"\",\n      shortDescription: data.shortDescription || \"\",\n      prizePool: data.prizePool || \"\",\n      requirements: data.requirements || \"\",\n      rules: data.rules || \"\",\n      judgesCriteria: data.judgesCriteria || \"\",\n      resources: [],\n      tags: [],\n      // Ensure dates are proper Date objects\n      startDate: new Date(data.startDate),\n      endDate: new Date(data.endDate),\n      registrationDeadline: new Date(data.registrationDeadline),\n    };\n    createEventMutation.mutate(cleanData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live': return 'bg-hack-emerald text-white';\n      case 'upcoming': return 'bg-hack-amber text-white';\n      case 'completed': return 'bg-gray-400 text-white';\n      case 'draft': return 'bg-gray-300 text-gray-700';\n      default: return 'bg-gray-400 text-white';\n    }\n  };\n\n  const categories = [\n    \"Web Development\",\n    \"Mobile Development\", \n    \"AI/ML\",\n    \"Blockchain\",\n    \"IoT\",\n    \"Data Science\",\n    \"Cybersecurity\",\n    \"Game Development\",\n    \"UI/UX Design\",\n    \"DevOps\"\n  ];\n\n  const myEventsStats = {\n    total: myEvents?.length || 0,\n    draft: myEvents?.filter((e: any) => e.status === 'draft').length || 0,\n    live: myEvents?.filter((e: any) => e.status === 'live').length || 0,\n    upcoming: myEvents?.filter((e: any) => e.status === 'upcoming').length || 0,\n    completed: myEvents?.filter((e: any) => e.status === 'completed').length || 0,\n    totalParticipants: myEvents?.reduce((sum: number, e: any) => sum + (e.currentParticipants || 0), 0) || 0,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-hack-light\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-hack-dark mb-2 flex items-center space-x-3\">\n            <Settings className=\"w-8 h-8 text-hack-purple\" />\n            <span>Organizer Dashboard</span>\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Create and manage your hackathons and coding events\n          </p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-purple rounded-lg flex items-center justify-center\">\n                  <CalendarIcon className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-purple\" data-testid=\"stat-my-events\">\n                    {myEventsStats.total}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">My Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-emerald rounded-lg flex items-center justify-center\">\n                  <Activity className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-emerald\" data-testid=\"stat-live-events\">\n                    {myEventsStats.live}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Live Events</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-amber rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-amber\" data-testid=\"stat-upcoming-events\">\n                    {myEventsStats.upcoming}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Upcoming</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-hack-indigo rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-hack-indigo\" data-testid=\"stat-total-participants\">\n                    {myEventsStats.totalParticipants}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Participants</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gray-400 rounded-lg flex items-center justify-center\">\n                  <Trophy className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-gray-600\" data-testid=\"stat-completed-events\">\n                    {myEventsStats.completed}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Completed</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"events\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"events\" data-testid=\"tab-my-events\">My Events ({myEventsStats.total})</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"tools\" data-testid=\"tab-tools\">Tools</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"events\" className=\"mt-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-xl font-semibold text-hack-dark\">Event Management</h2>\n              <Dialog open={isCreateEventOpen} onOpenChange={setIsCreateEventOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-hack-purple hover:bg-purple-600\" data-testid=\"button-create-event\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Event\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Event</DialogTitle>\n                  </DialogHeader>\n                  <Form {...eventForm}>\n                    <form onSubmit={eventForm.handleSubmit(onSubmitEvent)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={eventForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Event Title *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter event title\" {...field} data-testid=\"input-event-title\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={eventForm.control}\n                          name=\"category\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-event-category\">\n                                    <SelectValue placeholder=\"Select category\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {categories.map(category => (\n                                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={eventForm.control}\n                        name=\"shortDescription\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Short Description</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Brief description for event cards\" {...field} value={field.value || \"\"} data-testid=\"input-short-description\" />\n                            </FormControl>\n                            <FormDescription>\n                              This will be shown on event cards and previews\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={eventForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Description *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Detailed event description\" \n                                className=\"min-h-[120px]\" \n                                {...field} \n                                data-testid=\"textarea-event-description\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                        <FormField\n                          control={eventForm.control}\n                          name=\"startDate\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-col\">\n                              <FormLabel>Start Date *</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant=\"outline\"\n                                      className=\"w-full pl-3 text-left font-normal\"\n                                      data-testid=\"button-start-date\"\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Pick a date</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) => date < new Date()}\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={eventForm.control}\n                          name=\"endDate\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-col\">\n                              <FormLabel>End Date *</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant=\"outline\"\n                                      className=\"w-full pl-3 text-left font-normal\"\n                                      data-testid=\"button-end-date\"\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Pick a date</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) => date < new Date()}\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={eventForm.control}\n                          name=\"registrationDeadline\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-col\">\n                              <FormLabel>Registration Deadline *</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant=\"outline\"\n                                      className=\"w-full pl-3 text-left font-normal\"\n                                      data-testid=\"button-registration-deadline\"\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Pick a date</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) => date < new Date()}\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                        <FormField\n                          control={eventForm.control}\n                          name=\"maxParticipants\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Max Participants</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"Unlimited\" \n                                  {...field} \n                                  onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                  data-testid=\"input-max-participants\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={eventForm.control}\n                          name=\"difficulty\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Difficulty Level</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-difficulty\">\n                                    <SelectValue placeholder=\"Select difficulty\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"beginner\">Beginner</SelectItem>\n                                  <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                                  <SelectItem value=\"advanced\">Advanced</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={eventForm.control}\n                          name=\"prizePool\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Prize Pool</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g. $10,000\" {...field} data-testid=\"input-prize-pool\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={eventForm.control}\n                          name=\"requirements\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Requirements</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Skills, tools, or qualifications needed\" \n                                  {...field} \n                                  data-testid=\"textarea-requirements\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={eventForm.control}\n                          name=\"rules\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Rules & Guidelines</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Event rules and guidelines\" \n                                  {...field} \n                                  data-testid=\"textarea-rules\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={eventForm.control}\n                        name=\"judgesCriteria\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Judging Criteria</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"How projects will be evaluated\" \n                                {...field} \n                                data-testid=\"textarea-judging-criteria\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-4\">\n                          <FormField\n                            control={eventForm.control}\n                            name=\"allowTeams\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base\">\n                                    Allow Teams\n                                  </FormLabel>\n                                  <FormDescription>\n                                    Participants can form teams\n                                  </FormDescription>\n                                </div>\n                                <FormControl>\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={field.value}\n                                    onChange={field.onChange}\n                                    data-testid=\"checkbox-allow-teams\"\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          {eventForm.watch(\"allowTeams\") && (\n                            <FormField\n                              control={eventForm.control}\n                              name=\"maxTeamSize\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Max Team Size</FormLabel>\n                                  <FormControl>\n                                    <Input \n                                      type=\"number\" \n                                      placeholder=\"4\" \n                                      {...field} \n                                      onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                      data-testid=\"input-max-team-size\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          )}\n                        </div>\n\n                        <FormField\n                          control={eventForm.control}\n                          name=\"isPublic\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">\n                                  Public Event\n                                </FormLabel>\n                                <FormDescription>\n                                  Event will be visible to everyone\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <input\n                                  type=\"checkbox\"\n                                  checked={field.value}\n                                  onChange={field.onChange}\n                                  data-testid=\"checkbox-is-public\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsCreateEventOpen(false)}\n                          data-testid=\"button-cancel-create\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          className=\"bg-hack-purple hover:bg-purple-600\"\n                          disabled={createEventMutation.isPending}\n                          data-testid=\"button-submit-create\"\n                        >\n                          {createEventMutation.isPending ? \"Creating...\" : \"Create Event\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Events List */}\n            {eventsLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : myEvents && myEvents.length > 0 ? (\n              <div className=\"space-y-4\">\n                {myEvents.map((event: any) => (\n                  <Card key={event.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-4 mb-2\">\n                            <h3 className=\"text-lg font-semibold text-hack-dark\">{event.title}</h3>\n                            <Badge className={getStatusColor(event.status)}>\n                              {event.status?.toUpperCase()}\n                            </Badge>\n                            {event.category && (\n                              <Badge variant=\"outline\">{event.category}</Badge>\n                            )}\n                          </div>\n                          \n                          <p className=\"text-gray-600 mb-3 line-clamp-2\">\n                            {event.shortDescription || event.description}\n                          </p>\n                          \n                          <div className=\"flex items-center space-x-6 text-sm text-gray-600\">\n                            <div className=\"flex items-center space-x-1\">\n                              <CalendarIcon className=\"w-4 h-4\" />\n                              <span>\n                                {new Date(event.startDate).toLocaleDateString()} - {new Date(event.endDate).toLocaleDateString()}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Users className=\"w-4 h-4\" />\n                              <span>{event.currentParticipants || 0} participants</span>\n                            </div>\n                            {event.prizePool && (\n                              <div className=\"flex items-center space-x-1\">\n                                <Trophy className=\"w-4 h-4\" />\n                                <span>{event.prizePool}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Link href={`/events/${event.id}`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-event-${event.id}`}>\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              View\n                            </Button>\n                          </Link>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedEvent(event)}\n                            data-testid={`button-edit-event-${event.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => deleteEventMutation.mutate(event.id)}\n                            disabled={deleteEventMutation.isPending}\n                            data-testid={`button-delete-event-${event.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <CalendarIcon className=\"w-12 h-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Events Created</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Create your first event to start hosting hackathons and competitions.\n                </p>\n                <Button \n                  className=\"bg-hack-purple hover:bg-purple-600\"\n                  onClick={() => setIsCreateEventOpen(true)}\n                  data-testid=\"button-create-first-event\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Your First Event\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"w-5 h-5 text-hack-purple\" />\n                    <span>Event Performance</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {myEvents && myEvents.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-hack-purple\">\n                            {(myEventsStats.totalParticipants / Math.max(myEventsStats.total, 1)).toFixed(1)}\n                          </div>\n                          <div className=\"text-sm text-gray-600\">Avg Participants</div>\n                        </div>\n                        <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-hack-emerald\">\n                            {Math.round((myEventsStats.completed / Math.max(myEventsStats.total, 1)) * 100)}%\n                          </div>\n                          <div className=\"text-sm text-gray-600\">Completion Rate</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold text-hack-dark\">Top Performing Events</h4>\n                        {myEvents\n                          .sort((a: any, b: any) => (b.currentParticipants || 0) - (a.currentParticipants || 0))\n                          .slice(0, 3)\n                          .map((event: any) => (\n                            <div key={event.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                              <span className=\"font-medium line-clamp-1\">{event.title}</span>\n                              <span className=\"text-sm text-gray-600\">{event.currentParticipants || 0} participants</span>\n                            </div>\n                          ))}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <BarChart3 className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                      <p>No analytics available yet</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"w-5 h-5 text-hack-emerald\" />\n                    <span>Growth Insights</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-hack-emerald bg-opacity-10 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"font-semibold text-hack-emerald\">Active Events</span>\n                        <CheckCircle className=\"w-5 h-5 text-hack-emerald\" />\n                      </div>\n                      <div className=\"text-2xl font-bold text-hack-emerald\">\n                        {myEventsStats.live + myEventsStats.upcoming}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Events currently running or starting soon</div>\n                    </div>\n                    \n                    <div className=\"p-4 bg-hack-amber bg-opacity-10 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"font-semibold text-hack-amber\">Engagement Rate</span>\n                        <Target className=\"w-5 h-5 text-hack-amber\" />\n                      </div>\n                      <div className=\"text-2xl font-bold text-hack-amber\">\n                        {myEventsStats.totalParticipants > 0 ? '85%' : '0%'}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Average participant satisfaction</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"tools\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"card-hover cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-hack-purple rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <UserPlus className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h3 className=\"font-semibold text-hack-dark mb-2\">Bulk Registration</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Import participant lists from CSV files\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-bulk-registration\">\n                    Coming Soon\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"card-hover cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-hack-emerald rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <Award className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h3 className=\"font-semibold text-hack-dark mb-2\">Certificate Generator</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Generate certificates for participants and winners\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-certificate-generator\">\n                    Coming Soon\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"card-hover cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-hack-amber rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <ExternalLink className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h3 className=\"font-semibold text-hack-dark mb-2\">API Integration</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Connect with external judging platforms\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-api-integration\">\n                    Coming Soon\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":44643},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Code } from \"lucide-react\";\n\nexport default function Footer() {\n  const footerSections = [\n    {\n      title: \"Platform\",\n      links: [\n        { href: \"/events\", label: \"Browse Events\" },\n        { href: \"/organizer\", label: \"Host Event\" },\n        { href: \"/leaderboard\", label: \"Leaderboard\" },\n        { href: \"/resources\", label: \"Resources\" },\n      ],\n    },\n    {\n      title: \"Support\",\n      links: [\n        { href: \"/help\", label: \"Help Center\" },\n        { href: \"/community\", label: \"Community\" },\n        { href: \"/contact\", label: \"Contact Us\" },\n        { href: \"/api-docs\", label: \"API Docs\" },\n      ],\n    },\n    {\n      title: \"Legal\",\n      links: [\n        { href: \"/privacy\", label: \"Privacy Policy\" },\n        { href: \"/terms\", label: \"Terms of Service\" },\n        { href: \"/cookies\", label: \"Cookie Policy\" },\n        { href: \"/guidelines\", label: \"Community Guidelines\" },\n      ],\n    },\n  ];\n\n  const socialLinks = [\n    { href: \"https://twitter.com/hacksphere\", label: \"Twitter\", icon: \"fab fa-twitter\" },\n    { href: \"https://linkedin.com/company/hacksphere\", label: \"LinkedIn\", icon: \"fab fa-linkedin\" },\n    { href: \"https://github.com/hacksphere\", label: \"GitHub\", icon: \"fab fa-github\" },\n    { href: \"https://discord.gg/hacksphere\", label: \"Discord\", icon: \"fab fa-discord\" },\n  ];\n\n  return (\n    <footer className=\"bg-hack-dark text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand Section */}\n          <div className=\"col-span-1 md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-6\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-hack-purple to-hack-indigo rounded-lg flex items-center justify-center\">\n                <Code className=\"text-white w-4 h-4\" />\n              </div>\n              <span className=\"text-xl font-bold\">HackSphere</span>\n            </div>\n            <p className=\"text-gray-300 mb-6 max-w-md\">\n              The premier platform for hackathons and coding competitions. \n              Connecting innovators worldwide to build the future together.\n            </p>\n            \n            {/* Social Links */}\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social) => (\n                <a\n                  key={social.label}\n                  href={social.href}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-white hover:bg-opacity-10\"\n                  aria-label={social.label}\n                  data-testid={`social-${social.label.toLowerCase()}`}\n                >\n                  <i className={`${social.icon} text-xl`}></i>\n                </a>\n              ))}\n            </div>\n          </div>\n\n          {/* Footer Links */}\n          {footerSections.map((section) => (\n            <div key={section.title}>\n              <h3 className=\"font-semibold mb-4 text-white\">{section.title}</h3>\n              <ul className=\"space-y-2\">\n                {section.links.map((link) => (\n                  <li key={link.href}>\n                    <Link href={link.href}>\n                      <a \n                        className=\"text-gray-300 hover:text-white transition-colors text-sm\"\n                        data-testid={`footer-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        {link.label}\n                      </a>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Bottom Section */}\n        <div className=\"border-t border-gray-700 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-gray-400 text-sm\">\n            © 2024 HackSphere. All rights reserved.\n          </p>\n          \n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <Link href=\"/privacy\">\n              <a className=\"text-gray-400 hover:text-white transition-colors text-sm\" data-testid=\"footer-privacy-bottom\">\n                Privacy Policy\n              </a>\n            </Link>\n            <Link href=\"/terms\">\n              <a className=\"text-gray-400 hover:text-white transition-colors text-sm\" data-testid=\"footer-terms-bottom\">\n                Terms of Service\n              </a>\n            </Link>\n            <Link href=\"/cookies\">\n              <a className=\"text-gray-400 hover:text-white transition-colors text-sm\" data-testid=\"footer-cookies-bottom\">\n                Cookie Policy\n              </a>\n            </Link>\n          </div>\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"mt-8 pt-6 border-t border-gray-700 text-center\">\n          <p className=\"text-gray-400 text-sm\">\n            Built with ❤️ for the global developer community. \n            Join thousands of innovators shaping the future through code.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5144},"client/src/components/layout/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User as UserType } from \"@shared/schema\";\nimport { Code, Search, Menu, User, Settings, LogOut, LayoutDashboard, Calendar, Users } from \"lucide-react\";\n\nexport default function Navbar() {\n  const { user, isAuthenticated } = useAuth() as { user: UserType | null; isAuthenticated: boolean; };\n  const [location] = useLocation();\n\n  const isActive = (path: string) => location === path;\n\n  const navLinks = [\n    { href: \"/events\", label: \"Events\", icon: Calendar },\n    { href: \"/leaderboard\", label: \"Leaderboard\", icon: Users },\n  ];\n\n  const getUserInitials = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.email) {\n      return user.email.slice(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Desktop Navigation */}\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-hack-purple to-hack-indigo rounded-lg flex items-center justify-center\">\n                <Code className=\"text-white w-4 h-4\" />\n              </div>\n              <span className=\"text-xl font-bold text-hack-dark\">HackSphere</span>\n            </Link>\n            \n            <div className=\"hidden md:flex space-x-6\">\n              {navLinks.map(({ href, label, icon: Icon }) => (\n                <Link key={href} href={href}>\n                  <Button\n                    variant=\"ghost\"\n                    className={`flex items-center space-x-2 ${\n                      isActive(href) \n                        ? \"text-hack-purple bg-hack-purple bg-opacity-10\" \n                        : \"text-gray-700 hover:text-hack-purple\"\n                    }`}\n                    data-testid={`nav-${label.toLowerCase()}`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    <span>{label}</span>\n                  </Button>\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* Search and User Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Search - Hidden on mobile */}\n            <div className=\"relative hidden md:block\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search events...\"\n                className=\"w-64 pl-10 pr-4 py-2 border border-gray-200 rounded-full focus:outline-none focus:ring-2 focus:ring-hack-purple focus:border-transparent\"\n                data-testid=\"input-search-navbar\"\n              />\n            </div>\n\n            {/* Auth Section */}\n            {isAuthenticated && user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user.profileImageUrl || \"\"} alt={user.firstName || \"User\"} />\n                      <AvatarFallback className=\"bg-hack-purple text-white\">\n                        {getUserInitials()}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\">\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user.profileImageUrl || \"\"} alt={user.firstName || \"User\"} />\n                      <AvatarFallback className=\"bg-hack-purple text-white\">\n                        {getUserInitials()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium text-sm\">{user.firstName || user.email}</p>\n                      <p className=\"text-xs text-gray-600\">{user.email}</p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard\" className=\"w-full\" data-testid=\"link-dashboard\">\n                      <LayoutDashboard className=\"mr-2 h-4 w-4\" />\n                      Dashboard\n                    </Link>\n                  </DropdownMenuItem>\n                  {(user.role === 'admin' || user.role === 'organizer') && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/organizer\" className=\"w-full\" data-testid=\"link-organizer\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        Organizer Panel\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  {user.role === 'admin' && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin\" className=\"w-full\" data-testid=\"link-admin\">\n                        <Users className=\"mr-2 h-4 w-4\" />\n                        Admin Panel\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={() => window.location.href = \"/api/logout\"}\n                    data-testid=\"button-logout\"\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"ghost\" \n                  onClick={() => window.location.href = \"/api/login\"}\n                  data-testid=\"button-sign-in\"\n                >\n                  Sign In\n                </Button>\n                <Button \n                  className=\"bg-hack-purple hover:bg-purple-600 text-white\"\n                  onClick={() => window.location.href = \"/api/login\"}\n                  data-testid=\"button-get-started\"\n                >\n                  Get Started\n                </Button>\n              </div>\n            )}\n\n            {/* Mobile Menu */}\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent>\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {/* Mobile Search */}\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search events...\"\n                      className=\"pl-10\"\n                      data-testid=\"input-search-mobile\"\n                    />\n                  </div>\n\n                  {/* Mobile Navigation */}\n                  <div className=\"flex flex-col space-y-2\">\n                    {navLinks.map(({ href, label, icon: Icon }) => (\n                      <Link key={href} href={href}>\n                        <Button\n                          variant=\"ghost\"\n                          className={`w-full justify-start ${\n                            isActive(href) \n                              ? \"text-hack-purple bg-hack-purple bg-opacity-10\" \n                              : \"text-gray-700\"\n                          }`}\n                          data-testid={`mobile-nav-${label.toLowerCase()}`}\n                        >\n                          <Icon className=\"mr-2 h-4 w-4\" />\n                          {label}\n                        </Button>\n                      </Link>\n                    ))}\n                  </div>\n\n                  {/* Mobile Auth */}\n                  {!isAuthenticated && (\n                    <div className=\"pt-4 border-t\">\n                      <div className=\"flex flex-col space-y-2\">\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full\"\n                          onClick={() => window.location.href = \"/api/login\"}\n                          data-testid=\"button-mobile-sign-in\"\n                        >\n                          Sign In\n                        </Button>\n                        <Button \n                          className=\"w-full bg-hack-purple hover:bg-purple-600\"\n                          onClick={() => window.location.href = \"/api/login\"}\n                          data-testid=\"button-mobile-get-started\"\n                        >\n                          Get Started\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":9971},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}